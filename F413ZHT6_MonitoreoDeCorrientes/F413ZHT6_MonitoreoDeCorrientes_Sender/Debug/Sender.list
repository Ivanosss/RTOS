
Sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c44  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006e24  08006e24  00016e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f4c  08006f4c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006f4c  08006f4c  00016f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f54  08006f54  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004120  20000080  08006fdc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041a0  08006fdc  000241a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169ad  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e4  00000000  00000000  00036a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00039d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0003b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247a5  00000000  00000000  0003c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019738  00000000  00000000  00060a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e30fd  00000000  00000000  0007a1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d2ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000550c  00000000  00000000  0015d31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006e0c 	.word	0x08006e0c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	08006e0c 	.word	0x08006e0c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4a07      	ldr	r2, [pc, #28]	; (8000600 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <vApplicationGetIdleTaskMemory+0x30>)
 80005ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	2000009c 	.word	0x2000009c
 8000604:	200000f0 	.word	0x200000f0

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b08e      	sub	sp, #56	; 0x38
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fdf7 	bl	8001200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f855 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f957 	bl	80008c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800061a:	f000 f92b 	bl	8000874 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800061e:	f000 f8ad 	bl	800077c <MX_ADC1_Init>
  MX_UART5_Init();
 8000622:	f000 f8fd 	bl	8000820 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  xQueue1 = xQueueCreate(20, sizeof(char));
 8000626:	2200      	movs	r2, #0
 8000628:	2101      	movs	r1, #1
 800062a:	2014      	movs	r0, #20
 800062c:	f003 fe82 	bl	8004334 <xQueueGenericCreate>
 8000630:	4603      	mov	r3, r0
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <main+0x9c>)
 8000634:	6013      	str	r3, [r2, #0]
  xData_Available = xSemaphoreCreateBinary();
 8000636:	2203      	movs	r2, #3
 8000638:	2100      	movs	r1, #0
 800063a:	2001      	movs	r0, #1
 800063c:	f003 fe7a 	bl	8004334 <xQueueGenericCreate>
 8000640:	4603      	mov	r3, r0
 8000642:	4a19      	ldr	r2, [pc, #100]	; (80006a8 <main+0xa0>)
 8000644:	6013      	str	r3, [r2, #0]
  xData_cont = xSemaphoreCreateBinary();
 8000646:	2203      	movs	r2, #3
 8000648:	2100      	movs	r1, #0
 800064a:	2001      	movs	r0, #1
 800064c:	f003 fe72 	bl	8004334 <xQueueGenericCreate>
 8000650:	4603      	mov	r3, r0
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <main+0xa4>)
 8000654:	6013      	str	r3, [r2, #0]
  //osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(ReadingTask, ReadingTaskHook, osPriorityNormal, 0, 128);
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <main+0xa8>)
 8000658:	f107 041c 	add.w	r4, r7, #28
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadingTaskHandle = osThreadCreate(osThread(ReadingTask), NULL);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fcf6 	bl	8004062 <osThreadCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <main+0xac>)
 800067a:	6013      	str	r3, [r2, #0]
  osThreadDef(UploadTask, UploadTaskHook, osPriorityNormal, 0, 128);
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <main+0xb0>)
 800067e:	463c      	mov	r4, r7
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UploadTaskHandle = osThreadCreate(osThread(UploadTask), NULL);
 800068e:	463b      	mov	r3, r7
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fce5 	bl	8004062 <osThreadCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <main+0xb4>)
 800069c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800069e:	f003 fcd9 	bl	8004054 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <main+0x9a>
 80006a4:	200003c8 	.word	0x200003c8
 80006a8:	200003d0 	.word	0x200003d0
 80006ac:	200003d4 	.word	0x200003d4
 80006b0:	08006e3c 	.word	0x08006e3c
 80006b4:	200003c0 	.word	0x200003c0
 80006b8:	08006e58 	.word	0x08006e58
 80006bc:	200003c4 	.word	0x200003c4

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	; 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 ff34 	bl	800653c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xb4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xb4>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xb4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <SystemClock_Config+0xb8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <SystemClock_Config+0xb8>)
 800070a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <SystemClock_Config+0xb8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fe7f 	bl	8002434 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800073c:	f000 fb54 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fc58 	bl	8002010 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000766:	f000 fb3f 	bl	8000de8 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_ADC1_Init+0x98>)
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <MX_ADC1_Init+0x9c>)
 8000792:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_ADC1_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a6:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_ADC1_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_ADC1_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_ADC1_Init+0x98>)
 80007bc:	4a17      	ldr	r2, [pc, #92]	; (800081c <MX_ADC1_Init+0xa0>)
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_ADC1_Init+0x98>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_ADC1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_ADC1_Init+0x98>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007da:	480e      	ldr	r0, [pc, #56]	; (8000814 <MX_ADC1_Init+0x98>)
 80007dc:	f000 fd52 	bl	8001284 <HAL_ADC_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 faff 	bl	8000de8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ea:	2303      	movs	r3, #3
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <MX_ADC1_Init+0x98>)
 80007fc:	f000 fed2 	bl	80015a4 <HAL_ADC_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000806:	f000 faef 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200002f0 	.word	0x200002f0
 8000818:	40012000 	.word	0x40012000
 800081c:	0f000001 	.word	0x0f000001

08000820 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_UART5_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_UART5_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_UART5_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_UART5_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_UART5_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_UART5_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_UART5_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_UART5_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_UART5_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_UART5_Init+0x4c>)
 8000858:	f002 fb1e 	bl	8002e98 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 fac1 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000338 	.word	0x20000338
 8000870:	40005000 	.word	0x40005000

08000874 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_USART3_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008ac:	f002 faf4 	bl	8002e98 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 fa97 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000037c 	.word	0x2000037c
 80008c4:	40004800 	.word	0x40004800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_GPIO_Init+0x68>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <MX_GPIO_Init+0x68>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_GPIO_Init+0x68>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_GPIO_Init+0x68>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <MX_GPIO_Init+0x68>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_GPIO_Init+0x68>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_GPIO_Init+0x68>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <MX_GPIO_Init+0x68>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_GPIO_Init+0x68>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <UploadTaskHook>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void UploadTaskHook(void const * argument)
{
 8000934:	b5b0      	push	{r4, r5, r7, lr}
 8000936:	b090      	sub	sp, #64	; 0x40
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(xSemaphoreTake( xData_Available,  portMAX_DELAY)){
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <UploadTaskHook+0x118>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f04f 31ff 	mov.w	r1, #4294967295
 8000944:	4618      	mov	r0, r3
 8000946:	f003 ff2d 	bl	80047a4 <xQueueSemaphoreTake>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0f5      	beq.n	800093c <UploadTaskHook+0x8>
			char msg2[10];
			sprintf(msg2, "%lu\r\n", uxQueueSpacesAvailable( xQueue1 ));
 8000950:	4b3f      	ldr	r3, [pc, #252]	; (8000a50 <UploadTaskHook+0x11c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f004 f831 	bl	80049bc <uxQueueSpacesAvailable>
 800095a:	4602      	mov	r2, r0
 800095c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000960:	493c      	ldr	r1, [pc, #240]	; (8000a54 <UploadTaskHook+0x120>)
 8000962:	4618      	mov	r0, r3
 8000964:	f005 fdf2 	bl	800654c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)msg2, strlen(msg2), 100);
 8000968:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fc57 	bl	8000220 <strlen>
 8000972:	4603      	mov	r3, r0
 8000974:	b29a      	uxth	r2, r3
 8000976:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	4836      	ldr	r0, [pc, #216]	; (8000a58 <UploadTaskHook+0x124>)
 800097e:	f002 fad8 	bl	8002f32 <HAL_UART_Transmit>
			char msg3[5];
			sprintf(msg3, "%u\r\n", *myString);
 8000982:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <UploadTaskHook+0x128>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098e:	4934      	ldr	r1, [pc, #208]	; (8000a60 <UploadTaskHook+0x12c>)
 8000990:	4618      	mov	r0, r3
 8000992:	f005 fddb 	bl	800654c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)msg3, strlen(msg3), 100);
 8000996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fc40 	bl	8000220 <strlen>
 80009a0:	4603      	mov	r3, r0
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009a8:	2364      	movs	r3, #100	; 0x64
 80009aa:	482b      	ldr	r0, [pc, #172]	; (8000a58 <UploadTaskHook+0x124>)
 80009ac:	f002 fac1 	bl	8002f32 <HAL_UART_Transmit>
			//xQueueSend(xQueue1, msg3, portMAX_DELAY);
			for(int i = 0; i<sizeof(msg3); i++){
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009b4:	e033      	b.n	8000a1e <UploadTaskHook+0xea>
				if( xQueueSend( xQueue1, &msg3+i, ( TickType_t ) 0 ) != pdPASS )
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <UploadTaskHook+0x11c>)
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80009bc:	4613      	mov	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009c6:	18d1      	adds	r1, r2, r3
 80009c8:	2300      	movs	r3, #0
 80009ca:	2200      	movs	r2, #0
 80009cc:	f003 fd0c 	bl	80043e8 <xQueueGenericSend>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d013      	beq.n	80009fe <UploadTaskHook+0xca>
				{
					uint8_t buffer9[] = "Failed to Upload\r\n";
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <UploadTaskHook+0x130>)
 80009d8:	f107 0414 	add.w	r4, r7, #20
 80009dc:	461d      	mov	r5, r3
 80009de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e2:	682b      	ldr	r3, [r5, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	8022      	strh	r2, [r4, #0]
 80009e8:	3402      	adds	r4, #2
 80009ea:	0c1b      	lsrs	r3, r3, #16
 80009ec:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart3, buffer9, sizeof(buffer9), 100);
 80009ee:	f107 0114 	add.w	r1, r7, #20
 80009f2:	2364      	movs	r3, #100	; 0x64
 80009f4:	2213      	movs	r2, #19
 80009f6:	4818      	ldr	r0, [pc, #96]	; (8000a58 <UploadTaskHook+0x124>)
 80009f8:	f002 fa9b 	bl	8002f32 <HAL_UART_Transmit>
 80009fc:	e00c      	b.n	8000a18 <UploadTaskHook+0xe4>
				} else {
					uint8_t buffer9[] = "Upload :)\r\n";
 80009fe:	4a1a      	ldr	r2, [pc, #104]	; (8000a68 <UploadTaskHook+0x134>)
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					HAL_UART_Transmit(&huart3, buffer9, sizeof(buffer9), 100);
 8000a0a:	f107 0108 	add.w	r1, r7, #8
 8000a0e:	2364      	movs	r3, #100	; 0x64
 8000a10:	220c      	movs	r2, #12
 8000a12:	4811      	ldr	r0, [pc, #68]	; (8000a58 <UploadTaskHook+0x124>)
 8000a14:	f002 fa8d 	bl	8002f32 <HAL_UART_Transmit>
			for(int i = 0; i<sizeof(msg3); i++){
 8000a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d9c8      	bls.n	80009b6 <UploadTaskHook+0x82>
				}
			}
			if (uxQueueSpacesAvailable( xQueue1 ) == 0){
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <UploadTaskHook+0x11c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 ffc7 	bl	80049bc <uxQueueSpacesAvailable>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <UploadTaskHook+0x106>
				sending_function();
 8000a34:	f000 f93e 	bl	8000cb4 <sending_function>
 8000a38:	e780      	b.n	800093c <UploadTaskHook+0x8>
			} else {
				xSemaphoreGive( xData_cont);
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <UploadTaskHook+0x138>)
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	f003 fcd0 	bl	80043e8 <xQueueGenericSend>
		if(xSemaphoreTake( xData_Available,  portMAX_DELAY)){
 8000a48:	e778      	b.n	800093c <UploadTaskHook+0x8>
 8000a4a:	bf00      	nop
 8000a4c:	200003d0 	.word	0x200003d0
 8000a50:	200003c8 	.word	0x200003c8
 8000a54:	08006e74 	.word	0x08006e74
 8000a58:	2000037c 	.word	0x2000037c
 8000a5c:	200003e8 	.word	0x200003e8
 8000a60:	08006e7c 	.word	0x08006e7c
 8000a64:	08006e84 	.word	0x08006e84
 8000a68:	08006e98 	.word	0x08006e98
 8000a6c:	200003d4 	.word	0x200003d4

08000a70 <ReadingTaskHook>:
		}
	}
}

void ReadingTaskHook(void const * argument)
{
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	b096      	sub	sp, #88	; 0x58
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	TickType_t tickCount;
		/* The cycle time period. The task will be unblocked at time (in ticks)*/
		TickType_t frequency = 5000;
 8000a78:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54

		/* Get the current tck count */
		tickCount = xTaskGetTickCount();
 8000a7e:	f004 fc03 	bl	8005288 <xTaskGetTickCount>
 8000a82:	4603      	mov	r3, r0
 8000a84:	64fb      	str	r3, [r7, #76]	; 0x4c

		uint8_t buffer[19] = "AT+BAND=868500000\r\n";
 8000a86:	4b7d      	ldr	r3, [pc, #500]	; (8000c7c <ReadingTaskHook+0x20c>)
 8000a88:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a8c:	461d      	mov	r5, r3
 8000a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a92:	682b      	ldr	r3, [r5, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	8022      	strh	r2, [r4, #0]
 8000a98:	3402      	adds	r4, #2
 8000a9a:	0c1b      	lsrs	r3, r3, #16
 8000a9c:	7023      	strb	r3, [r4, #0]
		uint8_t buffer4[16] = "AT+NETWORKID=5\r\n";
 8000a9e:	4b78      	ldr	r3, [pc, #480]	; (8000c80 <ReadingTaskHook+0x210>)
 8000aa0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000aa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		uint8_t buffer5[16] = "AT+ADDRESS=101\r\n";
 8000aaa:	4b76      	ldr	r3, [pc, #472]	; (8000c84 <ReadingTaskHook+0x214>)
 8000aac:	f107 0418 	add.w	r4, r7, #24
 8000ab0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		HAL_UART_Transmit(&huart5, buffer, sizeof(buffer), 100);
 8000ab6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000aba:	2364      	movs	r3, #100	; 0x64
 8000abc:	2213      	movs	r2, #19
 8000abe:	4872      	ldr	r0, [pc, #456]	; (8000c88 <ReadingTaskHook+0x218>)
 8000ac0:	f002 fa37 	bl	8002f32 <HAL_UART_Transmit>

		HAL_StatusTypeDef status1 = HAL_UART_Receive(&huart5, buffer3, sizeof(buffer3), 1000);
 8000ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac8:	2205      	movs	r2, #5
 8000aca:	4970      	ldr	r1, [pc, #448]	; (8000c8c <ReadingTaskHook+0x21c>)
 8000acc:	486e      	ldr	r0, [pc, #440]	; (8000c88 <ReadingTaskHook+0x218>)
 8000ace:	f002 fac2 	bl	8003056 <HAL_UART_Receive>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		if(status1 != HAL_OK){
 8000ad8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d006      	beq.n	8000aee <ReadingTaskHook+0x7e>
		   HAL_UART_Transmit(&huart3, whoops, sizeof(whoops), 100);
 8000ae0:	2364      	movs	r3, #100	; 0x64
 8000ae2:	2209      	movs	r2, #9
 8000ae4:	496a      	ldr	r1, [pc, #424]	; (8000c90 <ReadingTaskHook+0x220>)
 8000ae6:	486b      	ldr	r0, [pc, #428]	; (8000c94 <ReadingTaskHook+0x224>)
 8000ae8:	f002 fa23 	bl	8002f32 <HAL_UART_Transmit>
 8000aec:	e005      	b.n	8000afa <ReadingTaskHook+0x8a>
		}
		else{
		   HAL_UART_Transmit(&huart3, buffer3, sizeof(buffer3), 100);
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	2205      	movs	r2, #5
 8000af2:	4966      	ldr	r1, [pc, #408]	; (8000c8c <ReadingTaskHook+0x21c>)
 8000af4:	4867      	ldr	r0, [pc, #412]	; (8000c94 <ReadingTaskHook+0x224>)
 8000af6:	f002 fa1c 	bl	8002f32 <HAL_UART_Transmit>
		}

		vTaskDelayUntil( &tickCount, 1000 );
 8000afa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000afe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 fa38 	bl	8004f78 <vTaskDelayUntil>

		HAL_UART_Transmit(&huart5, buffer4, sizeof(buffer4), 100);
 8000b08:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b0c:	2364      	movs	r3, #100	; 0x64
 8000b0e:	2210      	movs	r2, #16
 8000b10:	485d      	ldr	r0, [pc, #372]	; (8000c88 <ReadingTaskHook+0x218>)
 8000b12:	f002 fa0e 	bl	8002f32 <HAL_UART_Transmit>

		HAL_StatusTypeDef status2 = HAL_UART_Receive(&huart5, buffer3, sizeof(buffer3), 1000);
 8000b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1a:	2205      	movs	r2, #5
 8000b1c:	495b      	ldr	r1, [pc, #364]	; (8000c8c <ReadingTaskHook+0x21c>)
 8000b1e:	485a      	ldr	r0, [pc, #360]	; (8000c88 <ReadingTaskHook+0x218>)
 8000b20:	f002 fa99 	bl	8003056 <HAL_UART_Receive>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
		if(status2 != HAL_OK){
 8000b2a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d006      	beq.n	8000b40 <ReadingTaskHook+0xd0>
    	   HAL_UART_Transmit(&huart3, whoops, sizeof(whoops), 100);
 8000b32:	2364      	movs	r3, #100	; 0x64
 8000b34:	2209      	movs	r2, #9
 8000b36:	4956      	ldr	r1, [pc, #344]	; (8000c90 <ReadingTaskHook+0x220>)
 8000b38:	4856      	ldr	r0, [pc, #344]	; (8000c94 <ReadingTaskHook+0x224>)
 8000b3a:	f002 f9fa 	bl	8002f32 <HAL_UART_Transmit>
 8000b3e:	e005      	b.n	8000b4c <ReadingTaskHook+0xdc>
		}
		else{
		   HAL_UART_Transmit(&huart3, buffer3, sizeof(buffer3), 100);
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	2205      	movs	r2, #5
 8000b44:	4951      	ldr	r1, [pc, #324]	; (8000c8c <ReadingTaskHook+0x21c>)
 8000b46:	4853      	ldr	r0, [pc, #332]	; (8000c94 <ReadingTaskHook+0x224>)
 8000b48:	f002 f9f3 	bl	8002f32 <HAL_UART_Transmit>
		}

		vTaskDelayUntil( &tickCount, 1000 );
 8000b4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 fa0f 	bl	8004f78 <vTaskDelayUntil>

		HAL_UART_Transmit(&huart5, buffer5, sizeof(buffer5), 100);
 8000b5a:	f107 0118 	add.w	r1, r7, #24
 8000b5e:	2364      	movs	r3, #100	; 0x64
 8000b60:	2210      	movs	r2, #16
 8000b62:	4849      	ldr	r0, [pc, #292]	; (8000c88 <ReadingTaskHook+0x218>)
 8000b64:	f002 f9e5 	bl	8002f32 <HAL_UART_Transmit>

   	    HAL_StatusTypeDef status4 = HAL_UART_Receive(&huart5, buffer3, sizeof(buffer3), 1000);
 8000b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6c:	2205      	movs	r2, #5
 8000b6e:	4947      	ldr	r1, [pc, #284]	; (8000c8c <ReadingTaskHook+0x21c>)
 8000b70:	4845      	ldr	r0, [pc, #276]	; (8000c88 <ReadingTaskHook+0x218>)
 8000b72:	f002 fa70 	bl	8003056 <HAL_UART_Receive>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
		if(status4 != HAL_OK){
 8000b7c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <ReadingTaskHook+0x122>
		   HAL_UART_Transmit(&huart3, whoops, sizeof(whoops), 100);
 8000b84:	2364      	movs	r3, #100	; 0x64
 8000b86:	2209      	movs	r2, #9
 8000b88:	4941      	ldr	r1, [pc, #260]	; (8000c90 <ReadingTaskHook+0x220>)
 8000b8a:	4842      	ldr	r0, [pc, #264]	; (8000c94 <ReadingTaskHook+0x224>)
 8000b8c:	f002 f9d1 	bl	8002f32 <HAL_UART_Transmit>
 8000b90:	e005      	b.n	8000b9e <ReadingTaskHook+0x12e>
		}
		else{
		   HAL_UART_Transmit(&huart3, buffer3, sizeof(buffer3), 100);
 8000b92:	2364      	movs	r3, #100	; 0x64
 8000b94:	2205      	movs	r2, #5
 8000b96:	493d      	ldr	r1, [pc, #244]	; (8000c8c <ReadingTaskHook+0x21c>)
 8000b98:	483e      	ldr	r0, [pc, #248]	; (8000c94 <ReadingTaskHook+0x224>)
 8000b9a:	f002 f9ca 	bl	8002f32 <HAL_UART_Transmit>
		}

		vTaskDelayUntil( &tickCount, 1000 );
 8000b9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ba2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f004 f9e6 	bl	8004f78 <vTaskDelayUntil>

		xSemaphoreGive(xData_cont);
 8000bac:	4b3a      	ldr	r3, [pc, #232]	; (8000c98 <ReadingTaskHook+0x228>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f003 fc17 	bl	80043e8 <xQueueGenericSend>

		for(;;)
		{
			if(xSemaphoreTake( xData_cont,  portMAX_DELAY)){
 8000bba:	4b37      	ldr	r3, [pc, #220]	; (8000c98 <ReadingTaskHook+0x228>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f003 fdee 	bl	80047a4 <xQueueSemaphoreTake>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f5      	beq.n	8000bba <ReadingTaskHook+0x14a>
				uint8_t buffer1[] = "Reading\r\n";
 8000bce:	4a33      	ldr	r2, [pc, #204]	; (8000c9c <ReadingTaskHook+0x22c>)
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bd6:	c303      	stmia	r3!, {r0, r1}
 8000bd8:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, buffer1, sizeof(buffer1), 100);
 8000bda:	f107 010c 	add.w	r1, r7, #12
 8000bde:	2364      	movs	r3, #100	; 0x64
 8000be0:	220a      	movs	r2, #10
 8000be2:	482c      	ldr	r0, [pc, #176]	; (8000c94 <ReadingTaskHook+0x224>)
 8000be4:	f002 f9a5 	bl	8002f32 <HAL_UART_Transmit>
				HAL_ADC_Start(&hadc1);
 8000be8:	482d      	ldr	r0, [pc, #180]	; (8000ca0 <ReadingTaskHook+0x230>)
 8000bea:	f000 fb8f 	bl	800130c <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bee:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf2:	482b      	ldr	r0, [pc, #172]	; (8000ca0 <ReadingTaskHook+0x230>)
 8000bf4:	f000 fc3e 	bl	8001474 <HAL_ADC_PollForConversion>
				raw = HAL_ADC_GetValue(&hadc1);
 8000bf8:	4829      	ldr	r0, [pc, #164]	; (8000ca0 <ReadingTaskHook+0x230>)
 8000bfa:	f000 fcc6 	bl	800158a <HAL_ADC_GetValue>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <ReadingTaskHook+0x234>)
 8000c04:	801a      	strh	r2, [r3, #0]
				raw = raw/200;
 8000c06:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <ReadingTaskHook+0x234>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	4a27      	ldr	r2, [pc, #156]	; (8000ca8 <ReadingTaskHook+0x238>)
 8000c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c10:	099b      	lsrs	r3, r3, #6
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <ReadingTaskHook+0x234>)
 8000c16:	801a      	strh	r2, [r3, #0]
				raw = (int)raw;
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <ReadingTaskHook+0x234>)
 8000c1a:	881a      	ldrh	r2, [r3, #0]
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <ReadingTaskHook+0x234>)
 8000c1e:	801a      	strh	r2, [r3, #0]

				if (raw > 9){
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <ReadingTaskHook+0x234>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	2b09      	cmp	r3, #9
 8000c26:	d902      	bls.n	8000c2e <ReadingTaskHook+0x1be>
					raw = 9;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <ReadingTaskHook+0x234>)
 8000c2a:	2209      	movs	r2, #9
 8000c2c:	801a      	strh	r2, [r3, #0]
				}
				myString=&raw;
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <ReadingTaskHook+0x23c>)
 8000c30:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <ReadingTaskHook+0x234>)
 8000c32:	601a      	str	r2, [r3, #0]
				xSemaphoreGive(xData_Available);
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <ReadingTaskHook+0x240>)
 8000c36:	6818      	ldr	r0, [r3, #0]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f003 fbd3 	bl	80043e8 <xQueueGenericSend>
				if(xSemaphoreTake( xData_cont,  portMAX_DELAY)){
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <ReadingTaskHook+0x228>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f003 fdaa 	bl	80047a4 <xQueueSemaphoreTake>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0b1      	beq.n	8000bba <ReadingTaskHook+0x14a>
					tickCount = xTaskGetTickCount();
 8000c56:	f004 fb17 	bl	8005288 <xTaskGetTickCount>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
					vTaskDelayUntil( &tickCount, frequency );
 8000c5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 f987 	bl	8004f78 <vTaskDelayUntil>
					xSemaphoreGive(xData_cont);
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <ReadingTaskHook+0x228>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	f003 fbb8 	bl	80043e8 <xQueueGenericSend>
			if(xSemaphoreTake( xData_cont,  portMAX_DELAY)){
 8000c78:	e79f      	b.n	8000bba <ReadingTaskHook+0x14a>
 8000c7a:	bf00      	nop
 8000c7c:	08006ea4 	.word	0x08006ea4
 8000c80:	08006eb8 	.word	0x08006eb8
 8000c84:	08006ec8 	.word	0x08006ec8
 8000c88:	20000338 	.word	0x20000338
 8000c8c:	200003d8 	.word	0x200003d8
 8000c90:	20000000 	.word	0x20000000
 8000c94:	2000037c 	.word	0x2000037c
 8000c98:	200003d4 	.word	0x200003d4
 8000c9c:	08006ed8 	.word	0x08006ed8
 8000ca0:	200002f0 	.word	0x200002f0
 8000ca4:	200003cc 	.word	0x200003cc
 8000ca8:	51eb851f 	.word	0x51eb851f
 8000cac:	200003e8 	.word	0x200003e8
 8000cb0:	200003d0 	.word	0x200003d0

08000cb4 <sending_function>:
				}
			}
		}
}

void sending_function() {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0
	char msg[1];
	TickType_t tickCount;
	tickCount = xTaskGetTickCount();
 8000cba:	f004 fae5 	bl	8005288 <xTaskGetTickCount>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	617b      	str	r3, [r7, #20]

	for(int i = 0; i<4; i++){
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e061      	b.n	8000d8c <sending_function+0xd8>
		xQueueReceive( xQueue1, &msg, ( TickType_t ) 0 );
 8000cc8:	4b37      	ldr	r3, [pc, #220]	; (8000da8 <sending_function+0xf4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f107 0118 	add.w	r1, r7, #24
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fc86 	bl	80045e4 <xQueueReceive>
		char buffer6[17];
		sprintf(buffer6, "AT+SEND=102,1,%c\r\n", *msg);
 8000cd8:	7e3b      	ldrb	r3, [r7, #24]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	463b      	mov	r3, r7
 8000cde:	4933      	ldr	r1, [pc, #204]	; (8000dac <sending_function+0xf8>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f005 fc33 	bl	800654c <siprintf>
		HAL_UART_Transmit(&huart3, buffer6, sizeof(buffer6), 100);
 8000ce6:	4639      	mov	r1, r7
 8000ce8:	2364      	movs	r3, #100	; 0x64
 8000cea:	2211      	movs	r2, #17
 8000cec:	4830      	ldr	r0, [pc, #192]	; (8000db0 <sending_function+0xfc>)
 8000cee:	f002 f920 	bl	8002f32 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, buffer6, sizeof(buffer6), 100);
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	2364      	movs	r3, #100	; 0x64
 8000cf6:	2211      	movs	r2, #17
 8000cf8:	482e      	ldr	r0, [pc, #184]	; (8000db4 <sending_function+0x100>)
 8000cfa:	f002 f91a 	bl	8002f32 <HAL_UART_Transmit>

		HAL_StatusTypeDef status1 = HAL_UART_Receive(&huart5, buffer_long, sizeof(buffer_long), 1000);
 8000cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d02:	2205      	movs	r2, #5
 8000d04:	492c      	ldr	r1, [pc, #176]	; (8000db8 <sending_function+0x104>)
 8000d06:	482b      	ldr	r0, [pc, #172]	; (8000db4 <sending_function+0x100>)
 8000d08:	f002 f9a5 	bl	8003056 <HAL_UART_Receive>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	76fb      	strb	r3, [r7, #27]
	    if(status1 != HAL_OK){
 8000d10:	7efb      	ldrb	r3, [r7, #27]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <sending_function+0x70>
		   HAL_UART_Transmit(&huart3, whoops, sizeof(whoops), 100);
 8000d16:	2364      	movs	r3, #100	; 0x64
 8000d18:	2209      	movs	r2, #9
 8000d1a:	4928      	ldr	r1, [pc, #160]	; (8000dbc <sending_function+0x108>)
 8000d1c:	4824      	ldr	r0, [pc, #144]	; (8000db0 <sending_function+0xfc>)
 8000d1e:	f002 f908 	bl	8002f32 <HAL_UART_Transmit>
 8000d22:	e005      	b.n	8000d30 <sending_function+0x7c>
	    }
	    else{
	       HAL_UART_Transmit(&huart3, buffer_long, sizeof(buffer_long), 100);
 8000d24:	2364      	movs	r3, #100	; 0x64
 8000d26:	2205      	movs	r2, #5
 8000d28:	4923      	ldr	r1, [pc, #140]	; (8000db8 <sending_function+0x104>)
 8000d2a:	4821      	ldr	r0, [pc, #132]	; (8000db0 <sending_function+0xfc>)
 8000d2c:	f002 f901 	bl	8002f32 <HAL_UART_Transmit>
	    }

	    tickCount = xTaskGetTickCount();
 8000d30:	f004 faaa 	bl	8005288 <xTaskGetTickCount>
 8000d34:	4603      	mov	r3, r0
 8000d36:	617b      	str	r3, [r7, #20]
	    vTaskDelayUntil( &tickCount, 4000 );
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f004 f919 	bl	8004f78 <vTaskDelayUntil>

		xQueueReceive( xQueue1, &msg, ( TickType_t ) 0 );
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <sending_function+0xf4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f107 0118 	add.w	r1, r7, #24
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 fc47 	bl	80045e4 <xQueueReceive>
		xQueueReceive( xQueue1, &msg, ( TickType_t ) 0 );
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <sending_function+0xf4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f107 0118 	add.w	r1, r7, #24
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fc3f 	bl	80045e4 <xQueueReceive>
		xQueueReceive( xQueue1, &msg, ( TickType_t ) 0 );
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <sending_function+0xf4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f107 0118 	add.w	r1, r7, #24
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fc37 	bl	80045e4 <xQueueReceive>
		xQueueReceive( xQueue1, &msg, ( TickType_t ) 0 );
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <sending_function+0xf4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f107 0118 	add.w	r1, r7, #24
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f003 fc2f 	bl	80045e4 <xQueueReceive>
	for(int i = 0; i<4; i++){
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	dd9a      	ble.n	8000cc8 <sending_function+0x14>

	}
	xSemaphoreGive(xData_cont);
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <sending_function+0x10c>)
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	2300      	movs	r3, #0
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f003 fb24 	bl	80043e8 <xQueueGenericSend>
}
 8000da0:	bf00      	nop
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200003c8 	.word	0x200003c8
 8000dac:	08006ee4 	.word	0x08006ee4
 8000db0:	2000037c 	.word	0x2000037c
 8000db4:	20000338 	.word	0x20000338
 8000db8:	200003e0 	.word	0x200003e0
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	200003d4 	.word	0x200003d4

08000dc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d101      	bne.n	8000dda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dd6:	f000 fa35 	bl	8001244 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40010000 	.word	0x40010000

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_MspInit+0x54>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <HAL_MspInit+0x54>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_MspInit+0x54>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_MspInit+0x54>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_MspInit+0x54>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_MspInit+0x54>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	210f      	movs	r1, #15
 8000e36:	f06f 0001 	mvn.w	r0, #1
 8000e3a:	f000 fe99 	bl	8001b70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_ADC_MspInit+0x7c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d127      	bne.n	8000ebe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_ADC_MspInit+0x80>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <HAL_ADC_MspInit+0x80>)
 8000e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_ADC_MspInit+0x80>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_ADC_MspInit+0x80>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_ADC_MspInit+0x80>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_ADC_MspInit+0x80>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_ADC_MspInit+0x84>)
 8000eba:	f000 ff15 	bl	8001ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40012000 	.word	0x40012000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12d      	bne.n	8000f52 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <HAL_UART_MspInit+0x100>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a35      	ldr	r2, [pc, #212]	; (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a2e      	ldr	r2, [pc, #184]	; (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f2e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 8000f40:	230b      	movs	r3, #11
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4823      	ldr	r0, [pc, #140]	; (8000fd8 <HAL_UART_MspInit+0x104>)
 8000f4c:	f000 fecc 	bl	8001ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f50:	e039      	b.n	8000fc6 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <HAL_UART_MspInit+0x108>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d134      	bne.n	8000fc6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	6313      	str	r3, [r2, #48]	; 0x30
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <HAL_UART_MspInit+0x10c>)
 8000fb2:	f000 fe99 	bl	8001ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2105      	movs	r1, #5
 8000fba:	2027      	movs	r0, #39	; 0x27
 8000fbc:	f000 fdd8 	bl	8001b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fc0:	2027      	movs	r0, #39	; 0x27
 8000fc2:	f000 fdf1 	bl	8001ba8 <HAL_NVIC_EnableIRQ>
}
 8000fc6:	bf00      	nop
 8000fc8:	3730      	adds	r7, #48	; 0x30
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40005000 	.word	0x40005000
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40004800 	.word	0x40004800
 8000fe0:	40020c00 	.word	0x40020c00

08000fe4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <HAL_InitTick+0xd0>)
 8000ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffc:	4a2d      	ldr	r2, [pc, #180]	; (80010b4 <HAL_InitTick+0xd0>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6453      	str	r3, [r2, #68]	; 0x44
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <HAL_InitTick+0xd0>)
 8001006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001010:	f107 020c 	add.w	r2, r7, #12
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f001 f9d8 	bl	80023d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001020:	f001 f9c2 	bl	80023a8 <HAL_RCC_GetPCLK2Freq>
 8001024:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <HAL_InitTick+0xd4>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	0c9b      	lsrs	r3, r3, #18
 8001030:	3b01      	subs	r3, #1
 8001032:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_InitTick+0xd8>)
 8001036:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <HAL_InitTick+0xdc>)
 8001038:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800103a:	4b20      	ldr	r3, [pc, #128]	; (80010bc <HAL_InitTick+0xd8>)
 800103c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001040:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <HAL_InitTick+0xd8>)
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_InitTick+0xd8>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_InitTick+0xd8>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_InitTick+0xd8>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800105a:	4818      	ldr	r0, [pc, #96]	; (80010bc <HAL_InitTick+0xd8>)
 800105c:	f001 fc6e 	bl	800293c <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800106a:	2b00      	cmp	r3, #0
 800106c:	d11b      	bne.n	80010a6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800106e:	4813      	ldr	r0, [pc, #76]	; (80010bc <HAL_InitTick+0xd8>)
 8001070:	f001 fcbe 	bl	80029f0 <HAL_TIM_Base_Start_IT>
 8001074:	4603      	mov	r3, r0
 8001076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800107a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800107e:	2b00      	cmp	r3, #0
 8001080:	d111      	bne.n	80010a6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001082:	2019      	movs	r0, #25
 8001084:	f000 fd90 	bl	8001ba8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	d808      	bhi.n	80010a0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800108e:	2200      	movs	r2, #0
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	2019      	movs	r0, #25
 8001094:	f000 fd6c 	bl	8001b70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_InitTick+0xe0>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e002      	b.n	80010a6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3730      	adds	r7, #48	; 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	431bde83 	.word	0x431bde83
 80010bc:	200003ec 	.word	0x200003ec
 80010c0:	40010000 	.word	0x40010000
 80010c4:	20000010 	.word	0x20000010

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010fa:	f001 fce9 	bl	8002ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200003ec 	.word	0x200003ec

08001108 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <USART3_IRQHandler+0x10>)
 800110e:	f002 f845 	bl	800319c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000037c 	.word	0x2000037c

0800111c <_sbrk>:
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <_sbrk+0x5c>)
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <_sbrk+0x60>)
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <_sbrk+0x22>
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <_sbrk+0x64>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <_sbrk+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d207      	bcs.n	800115c <_sbrk+0x40>
 800114c:	f005 f9be 	bl	80064cc <__errno>
 8001150:	4603      	mov	r3, r0
 8001152:	220c      	movs	r2, #12
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	e009      	b.n	8001170 <_sbrk+0x54>
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <_sbrk+0x64>)
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20050000 	.word	0x20050000
 800117c:	00000400 	.word	0x00000400
 8001180:	20000434 	.word	0x20000434
 8001184:	200041a0 	.word	0x200041a0

08001188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <Reset_Handler>:
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e4 <LoopFillZerobss+0x12>
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <LoopFillZerobss+0x16>)
 80011b2:	490e      	ldr	r1, [pc, #56]	; (80011ec <LoopFillZerobss+0x1a>)
 80011b4:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <LoopFillZerobss+0x1e>)
 80011b6:	2300      	movs	r3, #0
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:
 80011ba:	58d4      	ldr	r4, [r2, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:
 80011c0:	18c4      	adds	r4, r0, r3
 80011c2:	428c      	cmp	r4, r1
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <LoopFillZerobss+0x22>)
 80011c8:	4c0b      	ldr	r4, [pc, #44]	; (80011f8 <LoopFillZerobss+0x26>)
 80011ca:	2300      	movs	r3, #0
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:
 80011d2:	42a2      	cmp	r2, r4
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>
 80011d6:	f7ff ffd7 	bl	8001188 <SystemInit>
 80011da:	f005 f97d 	bl	80064d8 <__libc_init_array>
 80011de:	f7ff fa13 	bl	8000608 <main>
 80011e2:	4770      	bx	lr
 80011e4:	20050000 	.word	0x20050000
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000080 	.word	0x20000080
 80011f0:	08006f5c 	.word	0x08006f5c
 80011f4:	20000080 	.word	0x20000080
 80011f8:	200041a0 	.word	0x200041a0

080011fc <ADC_IRQHandler>:
 80011fc:	e7fe      	b.n	80011fc <ADC_IRQHandler>
	...

08001200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_Init+0x40>)
 800120a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_Init+0x40>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_Init+0x40>)
 8001222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 fc96 	bl	8001b5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	200f      	movs	r0, #15
 8001230:	f7ff fed8 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff fdde 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023c00 	.word	0x40023c00

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000014 	.word	0x20000014
 8001268:	20000438 	.word	0x20000438

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000438 	.word	0x20000438

08001284 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e033      	b.n	8001302 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fdd2 	bl	8000e4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d118      	bne.n	80012f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012ca:	f023 0302 	bic.w	r3, r3, #2
 80012ce:	f043 0202 	orr.w	r2, r3, #2
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fa96 	bl	8001808 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f023 0303 	bic.w	r3, r3, #3
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
 80012f2:	e001      	b.n	80012f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Start+0x1a>
 8001322:	2302      	movs	r3, #2
 8001324:	e097      	b.n	8001456 <HAL_ADC_Start+0x14a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b01      	cmp	r3, #1
 800133a:	d018      	beq.n	800136e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0201 	orr.w	r2, r2, #1
 800134a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <HAL_ADC_Start+0x158>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a45      	ldr	r2, [pc, #276]	; (8001468 <HAL_ADC_Start+0x15c>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	0c9a      	lsrs	r2, r3, #18
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001360:	e002      	b.n	8001368 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3b01      	subs	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f9      	bne.n	8001362 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b01      	cmp	r3, #1
 800137a:	d15f      	bne.n	800143c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013ba:	d106      	bne.n	80013ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	f023 0206 	bic.w	r2, r3, #6
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	645a      	str	r2, [r3, #68]	; 0x44
 80013c8:	e002      	b.n	80013d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_ADC_Start+0x160>)
 80013da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10f      	bne.n	8001412 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d129      	bne.n	8001454 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	e020      	b.n	8001454 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a16      	ldr	r2, [pc, #88]	; (8001470 <HAL_ADC_Start+0x164>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d11b      	bne.n	8001454 <HAL_ADC_Start+0x148>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d114      	bne.n	8001454 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	e00b      	b.n	8001454 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f043 0210 	orr.w	r2, r3, #16
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	2000000c 	.word	0x2000000c
 8001468:	431bde83 	.word	0x431bde83
 800146c:	40012300 	.word	0x40012300
 8001470:	40012000 	.word	0x40012000

08001474 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001490:	d113      	bne.n	80014ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800149c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a0:	d10b      	bne.n	80014ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f043 0220 	orr.w	r2, r3, #32
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e063      	b.n	8001582 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014ba:	f7ff fed7 	bl	800126c <HAL_GetTick>
 80014be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014c0:	e021      	b.n	8001506 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d01d      	beq.n	8001506 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <HAL_ADC_PollForConversion+0x6c>
 80014d0:	f7ff fecc 	bl	800126c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d212      	bcs.n	8001506 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d00b      	beq.n	8001506 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f043 0204 	orr.w	r2, r3, #4
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e03d      	b.n	8001582 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b02      	cmp	r3, #2
 8001512:	d1d6      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f06f 0212 	mvn.w	r2, #18
 800151c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d123      	bne.n	8001580 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800153c:	2b00      	cmp	r3, #0
 800153e:	d11f      	bne.n	8001580 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800154a:	2b00      	cmp	r3, #0
 800154c:	d006      	beq.n	800155c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001558:	2b00      	cmp	r3, #0
 800155a:	d111      	bne.n	8001580 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d105      	bne.n	8001580 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1c>
 80015bc:	2302      	movs	r3, #2
 80015be:	e113      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x244>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d925      	bls.n	800161c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68d9      	ldr	r1, [r3, #12]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	3b1e      	subs	r3, #30
 80015e6:	2207      	movs	r2, #7
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43da      	mvns	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	400a      	ands	r2, r1
 80015f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68d9      	ldr	r1, [r3, #12]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	4603      	mov	r3, r0
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4403      	add	r3, r0
 800160e:	3b1e      	subs	r3, #30
 8001610:	409a      	lsls	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	e022      	b.n	8001662 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6919      	ldr	r1, [r3, #16]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	2207      	movs	r2, #7
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	400a      	ands	r2, r1
 800163e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6919      	ldr	r1, [r3, #16]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	4603      	mov	r3, r0
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4403      	add	r3, r0
 8001658:	409a      	lsls	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b06      	cmp	r3, #6
 8001668:	d824      	bhi.n	80016b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	3b05      	subs	r3, #5
 800167c:	221f      	movs	r2, #31
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	400a      	ands	r2, r1
 800168a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	3b05      	subs	r3, #5
 80016a6:	fa00 f203 	lsl.w	r2, r0, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	635a      	str	r2, [r3, #52]	; 0x34
 80016b2:	e04c      	b.n	800174e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	d824      	bhi.n	8001706 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b23      	subs	r3, #35	; 0x23
 80016ce:	221f      	movs	r2, #31
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43da      	mvns	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	400a      	ands	r2, r1
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b23      	subs	r3, #35	; 0x23
 80016f8:	fa00 f203 	lsl.w	r2, r0, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
 8001704:	e023      	b.n	800174e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	3b41      	subs	r3, #65	; 0x41
 8001718:	221f      	movs	r2, #31
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	400a      	ands	r2, r1
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b41      	subs	r3, #65	; 0x41
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_ADC_ConfigChannel+0x250>)
 8001750:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <HAL_ADC_ConfigChannel+0x254>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d10f      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1d8>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b12      	cmp	r3, #18
 8001762:	d10b      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_ADC_ConfigChannel+0x254>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d12b      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23a>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_ADC_ConfigChannel+0x258>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d003      	beq.n	8001798 <HAL_ADC_ConfigChannel+0x1f4>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b11      	cmp	r3, #17
 8001796:	d122      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_ADC_ConfigChannel+0x258>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d111      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_ADC_ConfigChannel+0x25c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_ADC_ConfigChannel+0x260>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9a      	lsrs	r2, r3, #18
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017d0:	e002      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f9      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40012300 	.word	0x40012300
 80017f8:	40012000 	.word	0x40012000
 80017fc:	10000012 	.word	0x10000012
 8001800:	2000000c 	.word	0x2000000c
 8001804:	431bde83 	.word	0x431bde83

08001808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001810:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <ADC_Init+0x1f0>)
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	431a      	orrs	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	021a      	lsls	r2, r3, #8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	4a58      	ldr	r2, [pc, #352]	; (80019fc <ADC_Init+0x1f4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d022      	beq.n	80018e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6899      	ldr	r1, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	e00f      	b.n	8001906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0202 	bic.w	r2, r2, #2
 8001914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7e1b      	ldrb	r3, [r3, #24]
 8001920:	005a      	lsls	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01b      	beq.n	800196c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	3b01      	subs	r3, #1
 8001960:	035a      	lsls	r2, r3, #13
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	e007      	b.n	800197c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	3b01      	subs	r3, #1
 8001998:	051a      	lsls	r2, r3, #20
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019be:	025a      	lsls	r2, r3, #9
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6899      	ldr	r1, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	029a      	lsls	r2, r3, #10
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40012300 	.word	0x40012300
 80019fc:	0f000001 	.word	0x0f000001

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <__NVIC_EnableIRQ+0x38>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff4c 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b82:	f7ff ff61 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001b86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	6978      	ldr	r0, [r7, #20]
 8001b8e:	f7ff ffb1 	bl	8001af4 <NVIC_EncodePriority>
 8001b92:	4602      	mov	r2, r0
 8001b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff80 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001ba0:	bf00      	nop
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff54 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bd2:	f7ff fb4b 	bl	800126c <HAL_GetTick>
 8001bd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d008      	beq.n	8001bf6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2280      	movs	r2, #128	; 0x80
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e052      	b.n	8001c9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0216 	bic.w	r2, r2, #22
 8001c04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d103      	bne.n	8001c26 <HAL_DMA_Abort+0x62>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0208 	bic.w	r2, r2, #8
 8001c34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c46:	e013      	b.n	8001c70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c48:	f7ff fb10 	bl	800126c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d90c      	bls.n	8001c70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e015      	b.n	8001c9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1e4      	bne.n	8001c48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	223f      	movs	r2, #63	; 0x3f
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d004      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00c      	b.n	8001cdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	e165      	b.n	8001fd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	f040 8154 	bne.w	8001fca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d005      	beq.n	8001d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d130      	bne.n	8001d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 0201 	and.w	r2, r3, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d017      	beq.n	8001dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d123      	bne.n	8001e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	08da      	lsrs	r2, r3, #3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3208      	adds	r2, #8
 8001dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	69b9      	ldr	r1, [r7, #24]
 8001e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0203 	and.w	r2, r3, #3
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80ae 	beq.w	8001fca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <HAL_GPIO_Init+0x300>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a5c      	ldr	r2, [pc, #368]	; (8001fe8 <HAL_GPIO_Init+0x300>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_GPIO_Init+0x300>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8a:	4a58      	ldr	r2, [pc, #352]	; (8001fec <HAL_GPIO_Init+0x304>)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	3302      	adds	r3, #2
 8001e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4f      	ldr	r2, [pc, #316]	; (8001ff0 <HAL_GPIO_Init+0x308>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d025      	beq.n	8001f02 <HAL_GPIO_Init+0x21a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4e      	ldr	r2, [pc, #312]	; (8001ff4 <HAL_GPIO_Init+0x30c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01f      	beq.n	8001efe <HAL_GPIO_Init+0x216>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4d      	ldr	r2, [pc, #308]	; (8001ff8 <HAL_GPIO_Init+0x310>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d019      	beq.n	8001efa <HAL_GPIO_Init+0x212>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	; (8001ffc <HAL_GPIO_Init+0x314>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d013      	beq.n	8001ef6 <HAL_GPIO_Init+0x20e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4b      	ldr	r2, [pc, #300]	; (8002000 <HAL_GPIO_Init+0x318>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00d      	beq.n	8001ef2 <HAL_GPIO_Init+0x20a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4a      	ldr	r2, [pc, #296]	; (8002004 <HAL_GPIO_Init+0x31c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <HAL_GPIO_Init+0x206>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a49      	ldr	r2, [pc, #292]	; (8002008 <HAL_GPIO_Init+0x320>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d101      	bne.n	8001eea <HAL_GPIO_Init+0x202>
 8001ee6:	2306      	movs	r3, #6
 8001ee8:	e00c      	b.n	8001f04 <HAL_GPIO_Init+0x21c>
 8001eea:	2307      	movs	r3, #7
 8001eec:	e00a      	b.n	8001f04 <HAL_GPIO_Init+0x21c>
 8001eee:	2305      	movs	r3, #5
 8001ef0:	e008      	b.n	8001f04 <HAL_GPIO_Init+0x21c>
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x21c>
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e004      	b.n	8001f04 <HAL_GPIO_Init+0x21c>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e002      	b.n	8001f04 <HAL_GPIO_Init+0x21c>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x21c>
 8001f02:	2300      	movs	r3, #0
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	f002 0203 	and.w	r2, r2, #3
 8001f0a:	0092      	lsls	r2, r2, #2
 8001f0c:	4093      	lsls	r3, r2
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f14:	4935      	ldr	r1, [pc, #212]	; (8001fec <HAL_GPIO_Init+0x304>)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_GPIO_Init+0x324>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f46:	4a31      	ldr	r2, [pc, #196]	; (800200c <HAL_GPIO_Init+0x324>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f4c:	4b2f      	ldr	r3, [pc, #188]	; (800200c <HAL_GPIO_Init+0x324>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f70:	4a26      	ldr	r2, [pc, #152]	; (800200c <HAL_GPIO_Init+0x324>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f76:	4b25      	ldr	r3, [pc, #148]	; (800200c <HAL_GPIO_Init+0x324>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	; (800200c <HAL_GPIO_Init+0x324>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <HAL_GPIO_Init+0x324>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_GPIO_Init+0x324>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	2b0f      	cmp	r3, #15
 8001fd4:	f67f ae96 	bls.w	8001d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40013800 	.word	0x40013800
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	40020c00 	.word	0x40020c00
 8002000:	40021000 	.word	0x40021000
 8002004:	40021400 	.word	0x40021400
 8002008:	40021800 	.word	0x40021800
 800200c:	40013c00 	.word	0x40013c00

08002010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0cc      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d90c      	bls.n	800204c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0b8      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002064:	4b59      	ldr	r3, [pc, #356]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800206e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	494d      	ldr	r1, [pc, #308]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d044      	beq.n	8002130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d119      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e07f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e067      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ee:	4b37      	ldr	r3, [pc, #220]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4934      	ldr	r1, [pc, #208]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002100:	f7ff f8b4 	bl	800126c <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	e00a      	b.n	800211e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7ff f8b0 	bl	800126c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e04f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 020c 	and.w	r2, r3, #12
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	429a      	cmp	r2, r3
 800212e:	d1eb      	bne.n	8002108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d20c      	bcs.n	8002158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e032      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4916      	ldr	r1, [pc, #88]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	490e      	ldr	r1, [pc, #56]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002196:	f000 f821 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800219a:	4602      	mov	r2, r0
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	490a      	ldr	r1, [pc, #40]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	5ccb      	ldrb	r3, [r1, r3]
 80021aa:	fa22 f303 	lsr.w	r3, r2, r3
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe ff14 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00
 80021cc:	40023800 	.word	0x40023800
 80021d0:	08006f00 	.word	0x08006f00
 80021d4:	2000000c 	.word	0x2000000c
 80021d8:	20000010 	.word	0x20000010

080021dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e0:	b090      	sub	sp, #64	; 0x40
 80021e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
 80021e8:	2300      	movs	r3, #0
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ec:	2300      	movs	r3, #0
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f4:	4b59      	ldr	r3, [pc, #356]	; (800235c <HAL_RCC_GetSysClockFreq+0x180>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d00d      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x40>
 8002200:	2b08      	cmp	r3, #8
 8002202:	f200 80a1 	bhi.w	8002348 <HAL_RCC_GetSysClockFreq+0x16c>
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x34>
 800220a:	2b04      	cmp	r3, #4
 800220c:	d003      	beq.n	8002216 <HAL_RCC_GetSysClockFreq+0x3a>
 800220e:	e09b      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCC_GetSysClockFreq+0x184>)
 8002212:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002214:	e09b      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002216:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCC_GetSysClockFreq+0x188>)
 8002218:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800221a:	e098      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800221c:	4b4f      	ldr	r3, [pc, #316]	; (800235c <HAL_RCC_GetSysClockFreq+0x180>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002226:	4b4d      	ldr	r3, [pc, #308]	; (800235c <HAL_RCC_GetSysClockFreq+0x180>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d028      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002232:	4b4a      	ldr	r3, [pc, #296]	; (800235c <HAL_RCC_GetSysClockFreq+0x180>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	099b      	lsrs	r3, r3, #6
 8002238:	2200      	movs	r2, #0
 800223a:	623b      	str	r3, [r7, #32]
 800223c:	627a      	str	r2, [r7, #36]	; 0x24
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002244:	2100      	movs	r1, #0
 8002246:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_RCC_GetSysClockFreq+0x188>)
 8002248:	fb03 f201 	mul.w	r2, r3, r1
 800224c:	2300      	movs	r3, #0
 800224e:	fb00 f303 	mul.w	r3, r0, r3
 8002252:	4413      	add	r3, r2
 8002254:	4a43      	ldr	r2, [pc, #268]	; (8002364 <HAL_RCC_GetSysClockFreq+0x188>)
 8002256:	fba0 1202 	umull	r1, r2, r0, r2
 800225a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800225c:	460a      	mov	r2, r1
 800225e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002262:	4413      	add	r3, r2
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002268:	2200      	movs	r2, #0
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	61fa      	str	r2, [r7, #28]
 800226e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002272:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002276:	f7fe f82b 	bl	80002d0 <__aeabi_uldivmod>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4613      	mov	r3, r2
 8002280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002282:	e053      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002284:	4b35      	ldr	r3, [pc, #212]	; (800235c <HAL_RCC_GetSysClockFreq+0x180>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	2200      	movs	r2, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	617a      	str	r2, [r7, #20]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002296:	f04f 0b00 	mov.w	fp, #0
 800229a:	4652      	mov	r2, sl
 800229c:	465b      	mov	r3, fp
 800229e:	f04f 0000 	mov.w	r0, #0
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	0159      	lsls	r1, r3, #5
 80022a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ac:	0150      	lsls	r0, r2, #5
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	ebb2 080a 	subs.w	r8, r2, sl
 80022b6:	eb63 090b 	sbc.w	r9, r3, fp
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022ce:	ebb2 0408 	subs.w	r4, r2, r8
 80022d2:	eb63 0509 	sbc.w	r5, r3, r9
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	00eb      	lsls	r3, r5, #3
 80022e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e4:	00e2      	lsls	r2, r4, #3
 80022e6:	4614      	mov	r4, r2
 80022e8:	461d      	mov	r5, r3
 80022ea:	eb14 030a 	adds.w	r3, r4, sl
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	eb45 030b 	adc.w	r3, r5, fp
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002302:	4629      	mov	r1, r5
 8002304:	028b      	lsls	r3, r1, #10
 8002306:	4621      	mov	r1, r4
 8002308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800230c:	4621      	mov	r1, r4
 800230e:	028a      	lsls	r2, r1, #10
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002316:	2200      	movs	r2, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	60fa      	str	r2, [r7, #12]
 800231c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002320:	f7fd ffd6 	bl	80002d0 <__aeabi_uldivmod>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4613      	mov	r3, r2
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_GetSysClockFreq+0x180>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	3301      	adds	r3, #1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800233c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002346:	e002      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCC_GetSysClockFreq+0x184>)
 800234a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800234c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002350:	4618      	mov	r0, r3
 8002352:	3740      	adds	r7, #64	; 0x40
 8002354:	46bd      	mov	sp, r7
 8002356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	00f42400 	.word	0x00f42400
 8002364:	017d7840 	.word	0x017d7840

08002368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_RCC_GetHCLKFreq+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	2000000c 	.word	0x2000000c

08002380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002384:	f7ff fff0 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0a9b      	lsrs	r3, r3, #10
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	4903      	ldr	r1, [pc, #12]	; (80023a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	08006f10 	.word	0x08006f10

080023a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023ac:	f7ff ffdc 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0b5b      	lsrs	r3, r3, #13
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	4903      	ldr	r1, [pc, #12]	; (80023cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	08006f10 	.word	0x08006f10

080023d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	220f      	movs	r2, #15
 80023de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_RCC_GetClockConfig+0x5c>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0203 	and.w	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <HAL_RCC_GetClockConfig+0x5c>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <HAL_RCC_GetClockConfig+0x5c>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_RCC_GetClockConfig+0x5c>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	08db      	lsrs	r3, r3, #3
 800240a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <HAL_RCC_GetClockConfig+0x60>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0207 	and.w	r2, r3, #7
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	601a      	str	r2, [r3, #0]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	40023c00 	.word	0x40023c00

08002434 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e273      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d075      	beq.n	800253e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002452:	4b88      	ldr	r3, [pc, #544]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b04      	cmp	r3, #4
 800245c:	d00c      	beq.n	8002478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245e:	4b85      	ldr	r3, [pc, #532]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002466:	2b08      	cmp	r3, #8
 8002468:	d112      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b82      	ldr	r3, [pc, #520]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002476:	d10b      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	4b7e      	ldr	r3, [pc, #504]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d05b      	beq.n	800253c <HAL_RCC_OscConfig+0x108>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d157      	bne.n	800253c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e24e      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d106      	bne.n	80024a8 <HAL_RCC_OscConfig+0x74>
 800249a:	4b76      	ldr	r3, [pc, #472]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a75      	ldr	r2, [pc, #468]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x98>
 80024b2:	4b70      	ldr	r3, [pc, #448]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a6f      	ldr	r2, [pc, #444]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6c      	ldr	r2, [pc, #432]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024cc:	4b69      	ldr	r3, [pc, #420]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a68      	ldr	r2, [pc, #416]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b66      	ldr	r3, [pc, #408]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a65      	ldr	r2, [pc, #404]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe febe 	bl	800126c <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe feba 	bl	800126c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e213      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b5b      	ldr	r3, [pc, #364]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xc0>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe feaa 	bl	800126c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe fea6 	bl	800126c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1ff      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b51      	ldr	r3, [pc, #324]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0xe8>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b44      	ldr	r3, [pc, #272]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1d3      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4937      	ldr	r1, [pc, #220]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b34      	ldr	r3, [pc, #208]	; (8002678 <HAL_RCC_OscConfig+0x244>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe fe5f 	bl	800126c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b2:	f7fe fe5b 	bl	800126c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1b4      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b28      	ldr	r3, [pc, #160]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4925      	ldr	r1, [pc, #148]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_OscConfig+0x244>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fe3e 	bl	800126c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fe3a 	bl	800126c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e193      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d036      	beq.n	800268c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_RCC_OscConfig+0x248>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe fe1e 	bl	800126c <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002634:	f7fe fe1a 	bl	800126c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e173      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x200>
 8002652:	e01b      	b.n	800268c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_RCC_OscConfig+0x248>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7fe fe07 	bl	800126c <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	e00e      	b.n	8002680 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002662:	f7fe fe03 	bl	800126c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d907      	bls.n	8002680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e15c      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
 8002674:	40023800 	.word	0x40023800
 8002678:	42470000 	.word	0x42470000
 800267c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	4b8a      	ldr	r3, [pc, #552]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ea      	bne.n	8002662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8097 	beq.w	80027c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269e:	4b83      	ldr	r3, [pc, #524]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10f      	bne.n	80026ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	4b7f      	ldr	r3, [pc, #508]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a7e      	ldr	r2, [pc, #504]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b7c      	ldr	r3, [pc, #496]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b79      	ldr	r3, [pc, #484]	; (80028b0 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x47c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fdc3 	bl	800126c <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ea:	f7fe fdbf 	bl	800126c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e118      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	4b6c      	ldr	r3, [pc, #432]	; (80028b0 <HAL_RCC_OscConfig+0x47c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x2ea>
 8002710:	4b66      	ldr	r3, [pc, #408]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a65      	ldr	r2, [pc, #404]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
 800271c:	e01c      	b.n	8002758 <HAL_RCC_OscConfig+0x324>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b05      	cmp	r3, #5
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x30c>
 8002726:	4b61      	ldr	r3, [pc, #388]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a60      	ldr	r2, [pc, #384]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	4b5e      	ldr	r3, [pc, #376]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a5d      	ldr	r2, [pc, #372]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0x324>
 8002740:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a59      	ldr	r2, [pc, #356]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
 800274c:	4b57      	ldr	r3, [pc, #348]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a56      	ldr	r2, [pc, #344]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002752:	f023 0304 	bic.w	r3, r3, #4
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe fd84 	bl	800126c <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	e00a      	b.n	800277e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7fe fd80 	bl	800126c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0d7      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277e:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ee      	beq.n	8002768 <HAL_RCC_OscConfig+0x334>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7fe fd6e 	bl	800126c <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7fe fd6a 	bl	800126c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0c1      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027aa:	4b40      	ldr	r3, [pc, #256]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ee      	bne.n	8002794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027bc:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	4a3a      	ldr	r2, [pc, #232]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 80027c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80ad 	beq.w	800292c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d2:	4b36      	ldr	r3, [pc, #216]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d060      	beq.n	80028a0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d145      	bne.n	8002872 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <HAL_RCC_OscConfig+0x480>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe fd3e 	bl	800126c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe fd3a 	bl	800126c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e093      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	3b01      	subs	r3, #1
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	071b      	lsls	r3, r3, #28
 800283e:	491b      	ldr	r1, [pc, #108]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x480>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fe fd0f 	bl	800126c <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe fd0b 	bl	800126c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e064      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x41e>
 8002870:	e05c      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_RCC_OscConfig+0x480>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fcf8 	bl	800126c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe fcf4 	bl	800126c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e04d      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x44c>
 800289e:	e045      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e040      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40007000 	.word	0x40007000
 80028b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <HAL_RCC_OscConfig+0x504>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d030      	beq.n	8002928 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d129      	bne.n	8002928 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d122      	bne.n	8002928 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d119      	bne.n	8002928 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	3b01      	subs	r3, #1
 8002902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d10f      	bne.n	8002928 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d107      	bne.n	8002928 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e041      	b.n	80029d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f839 	bl	80029da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3304      	adds	r3, #4
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f000 f9d8 	bl	8002d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d001      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e04e      	b.n	8002aa6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d022      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a32:	d01d      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d018      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <HAL_TIM_Base_Start_IT+0xcc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00e      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d009      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d004      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a18      	ldr	r2, [pc, #96]	; (8002acc <HAL_TIM_Base_Start_IT+0xdc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d111      	bne.n	8002a94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d010      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a92:	e007      	b.n	8002aa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	40000c00 	.word	0x40000c00
 8002ac4:	40010400 	.word	0x40010400
 8002ac8:	40014000 	.word	0x40014000
 8002acc:	40001800 	.word	0x40001800

08002ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d122      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d11b      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0202 	mvn.w	r2, #2
 8002afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8ee 	bl	8002cf4 <HAL_TIM_IC_CaptureCallback>
 8002b18:	e005      	b.n	8002b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f8e0 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f8f1 	bl	8002d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d122      	bne.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d11b      	bne.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0204 	mvn.w	r2, #4
 8002b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8c4 	bl	8002cf4 <HAL_TIM_IC_CaptureCallback>
 8002b6c:	e005      	b.n	8002b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f8b6 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f8c7 	bl	8002d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d122      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0208 	mvn.w	r2, #8
 8002ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f89a 	bl	8002cf4 <HAL_TIM_IC_CaptureCallback>
 8002bc0:	e005      	b.n	8002bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f88c 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f89d 	bl	8002d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d122      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d11b      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0210 	mvn.w	r2, #16
 8002bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f870 	bl	8002cf4 <HAL_TIM_IC_CaptureCallback>
 8002c14:	e005      	b.n	8002c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f862 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f873 	bl	8002d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0201 	mvn.w	r2, #1
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fe f8b8 	bl	8000dc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f902 	bl	8002e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b40      	cmp	r3, #64	; 0x40
 8002c8c:	d10e      	bne.n	8002cac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c98:	2b40      	cmp	r3, #64	; 0x40
 8002c9a:	d107      	bne.n	8002cac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f838 	bl	8002d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d107      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0220 	mvn.w	r2, #32
 8002cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f8cc 	bl	8002e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a40      	ldr	r2, [pc, #256]	; (8002e44 <TIM_Base_SetConfig+0x114>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d013      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4e:	d00f      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3d      	ldr	r2, [pc, #244]	; (8002e48 <TIM_Base_SetConfig+0x118>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00b      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3c      	ldr	r2, [pc, #240]	; (8002e4c <TIM_Base_SetConfig+0x11c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3b      	ldr	r2, [pc, #236]	; (8002e50 <TIM_Base_SetConfig+0x120>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3a      	ldr	r2, [pc, #232]	; (8002e54 <TIM_Base_SetConfig+0x124>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d108      	bne.n	8002d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2f      	ldr	r2, [pc, #188]	; (8002e44 <TIM_Base_SetConfig+0x114>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02b      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d027      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2c      	ldr	r2, [pc, #176]	; (8002e48 <TIM_Base_SetConfig+0x118>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d023      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2b      	ldr	r2, [pc, #172]	; (8002e4c <TIM_Base_SetConfig+0x11c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01f      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2a      	ldr	r2, [pc, #168]	; (8002e50 <TIM_Base_SetConfig+0x120>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01b      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a29      	ldr	r2, [pc, #164]	; (8002e54 <TIM_Base_SetConfig+0x124>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d017      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a28      	ldr	r2, [pc, #160]	; (8002e58 <TIM_Base_SetConfig+0x128>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a27      	ldr	r2, [pc, #156]	; (8002e5c <TIM_Base_SetConfig+0x12c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00f      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a26      	ldr	r2, [pc, #152]	; (8002e60 <TIM_Base_SetConfig+0x130>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00b      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a25      	ldr	r2, [pc, #148]	; (8002e64 <TIM_Base_SetConfig+0x134>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d007      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <TIM_Base_SetConfig+0x138>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <TIM_Base_SetConfig+0x13c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d108      	bne.n	8002df4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <TIM_Base_SetConfig+0x114>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d003      	beq.n	8002e28 <TIM_Base_SetConfig+0xf8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <TIM_Base_SetConfig+0x124>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d103      	bne.n	8002e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	615a      	str	r2, [r3, #20]
}
 8002e36:	bf00      	nop
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40010000 	.word	0x40010000
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800
 8002e50:	40000c00 	.word	0x40000c00
 8002e54:	40010400 	.word	0x40010400
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	40014400 	.word	0x40014400
 8002e60:	40014800 	.word	0x40014800
 8002e64:	40001800 	.word	0x40001800
 8002e68:	40001c00 	.word	0x40001c00
 8002e6c:	40002000 	.word	0x40002000

08002e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e03f      	b.n	8002f2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe f808 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	; 0x24
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fe1d 	bl	8003b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b08a      	sub	sp, #40	; 0x28
 8002f36:	af02      	add	r7, sp, #8
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d17c      	bne.n	800304c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_UART_Transmit+0x2c>
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e075      	b.n	800304e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_UART_Transmit+0x3e>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e06e      	b.n	800304e <HAL_UART_Transmit+0x11c>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2221      	movs	r2, #33	; 0x21
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f86:	f7fe f971 	bl	800126c <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	88fa      	ldrh	r2, [r7, #6]
 8002f90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	88fa      	ldrh	r2, [r7, #6]
 8002f96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa0:	d108      	bne.n	8002fb4 <HAL_UART_Transmit+0x82>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	e003      	b.n	8002fbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fc4:	e02a      	b.n	800301c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fb9b 	bl	800370c <UART_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e036      	b.n	800304e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10b      	bne.n	8002ffe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e007      	b.n	800300e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	781a      	ldrb	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3301      	adds	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1cf      	bne.n	8002fc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2200      	movs	r2, #0
 800302e:	2140      	movs	r1, #64	; 0x40
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fb6b 	bl	800370c <UART_WaitOnFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e006      	b.n	800304e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b08a      	sub	sp, #40	; 0x28
 800305a:	af02      	add	r7, sp, #8
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b20      	cmp	r3, #32
 8003074:	f040 808c 	bne.w	8003190 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_UART_Receive+0x2e>
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e084      	b.n	8003192 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_UART_Receive+0x40>
 8003092:	2302      	movs	r3, #2
 8003094:	e07d      	b.n	8003192 <HAL_UART_Receive+0x13c>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2222      	movs	r2, #34	; 0x22
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b2:	f7fe f8db 	bl	800126c <HAL_GetTick>
 80030b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	88fa      	ldrh	r2, [r7, #6]
 80030c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030cc:	d108      	bne.n	80030e0 <HAL_UART_Receive+0x8a>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d104      	bne.n	80030e0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e003      	b.n	80030e8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030f0:	e043      	b.n	800317a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2120      	movs	r1, #32
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fb05 	bl	800370c <UART_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e042      	b.n	8003192 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	b29b      	uxth	r3, r3
 800311a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311e:	b29a      	uxth	r2, r3
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	3302      	adds	r3, #2
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	e01f      	b.n	800316c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003134:	d007      	beq.n	8003146 <HAL_UART_Receive+0xf0>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <HAL_UART_Receive+0xfe>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e008      	b.n	8003166 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003160:	b2da      	uxtb	r2, r3
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3301      	adds	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1b6      	bne.n	80030f2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3720      	adds	r7, #32
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b0ba      	sub	sp, #232	; 0xe8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10f      	bne.n	8003202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_UART_IRQHandler+0x66>
 80031ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fbd3 	bl	80039a6 <UART_Receive_IT>
      return;
 8003200:	e256      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80de 	beq.w	80033c8 <HAL_UART_IRQHandler+0x22c>
 800320c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800321c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80d1 	beq.w	80033c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_UART_IRQHandler+0xae>
 8003232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f043 0201 	orr.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_UART_IRQHandler+0xd2>
 8003256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0202 	orr.w	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_UART_IRQHandler+0xf6>
 800327a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f043 0204 	orr.w	r2, r3, #4
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d011      	beq.n	80032c2 <HAL_UART_IRQHandler+0x126>
 800329e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f043 0208 	orr.w	r2, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 81ed 	beq.w	80036a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_UART_IRQHandler+0x14e>
 80032d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fb5e 	bl	80039a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <HAL_UART_IRQHandler+0x17a>
 800330e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04f      	beq.n	80033b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fa66 	bl	80037e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d141      	bne.n	80033ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3314      	adds	r3, #20
 8003330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3314      	adds	r3, #20
 8003352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800335a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800336e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1d9      	bne.n	800332a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	4a7d      	ldr	r2, [pc, #500]	; (8003578 <HAL_UART_IRQHandler+0x3dc>)
 8003384:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fc8a 	bl	8001ca4 <HAL_DMA_Abort_IT>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033a0:	4610      	mov	r0, r2
 80033a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e00e      	b.n	80033c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f99a 	bl	80036e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	e00a      	b.n	80033c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f996 	bl	80036e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	e006      	b.n	80033c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f992 	bl	80036e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033c2:	e170      	b.n	80036a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	bf00      	nop
    return;
 80033c6:	e16e      	b.n	80036a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	f040 814a 	bne.w	8003666 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8143 	beq.w	8003666 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 813c 	beq.w	8003666 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	f040 80b4 	bne.w	800357c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8140 	beq.w	80036aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800342e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003432:	429a      	cmp	r2, r3
 8003434:	f080 8139 	bcs.w	80036aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800343e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344a:	f000 8088 	beq.w	800355e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	330c      	adds	r3, #12
 8003454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800346c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800347a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800347e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1d9      	bne.n	800344e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3314      	adds	r3, #20
 80034a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e1      	bne.n	800349a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3314      	adds	r3, #20
 80034dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3314      	adds	r3, #20
 80034f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e3      	bne.n	80034d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800352c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352e:	f023 0310 	bic.w	r3, r3, #16
 8003532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003540:	65ba      	str	r2, [r7, #88]	; 0x58
 8003542:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800354e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e3      	bne.n	800351c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fb33 	bl	8001bc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003566:	b29b      	uxth	r3, r3
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	b29b      	uxth	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f8c0 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003574:	e099      	b.n	80036aa <HAL_UART_IRQHandler+0x50e>
 8003576:	bf00      	nop
 8003578:	080038af 	.word	0x080038af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003584:	b29b      	uxth	r3, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 808b 	beq.w	80036ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8086 	beq.w	80036ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035c6:	647a      	str	r2, [r7, #68]	; 0x44
 80035c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e3      	bne.n	80035a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	623b      	str	r3, [r7, #32]
   return(result);
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035fe:	633a      	str	r2, [r7, #48]	; 0x30
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e3      	bne.n	80035da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0310 	bic.w	r3, r3, #16
 8003636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003644:	61fa      	str	r2, [r7, #28]
 8003646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	617b      	str	r3, [r7, #20]
   return(result);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e3      	bne.n	8003620 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f848 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003664:	e023      	b.n	80036ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_UART_IRQHandler+0x4ea>
 8003672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f929 	bl	80038d6 <UART_Transmit_IT>
    return;
 8003684:	e014      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00e      	beq.n	80036b0 <HAL_UART_IRQHandler+0x514>
 8003692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f969 	bl	8003976 <UART_EndTransmit_IT>
    return;
 80036a4:	e004      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
    return;
 80036a6:	bf00      	nop
 80036a8:	e002      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
      return;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
      return;
 80036ae:	bf00      	nop
  }
}
 80036b0:	37e8      	adds	r7, #232	; 0xe8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop

080036b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b090      	sub	sp, #64	; 0x40
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371c:	e050      	b.n	80037c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d04c      	beq.n	80037c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0x30>
 800372c:	f7fd fd9e 	bl	800126c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003738:	429a      	cmp	r2, r3
 800373a:	d241      	bcs.n	80037c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	330c      	adds	r3, #12
 800375a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800375c:	637a      	str	r2, [r7, #52]	; 0x34
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e5      	bne.n	800373c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3314      	adds	r3, #20
 8003776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	613b      	str	r3, [r7, #16]
   return(result);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3314      	adds	r3, #20
 800378e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003790:	623a      	str	r2, [r7, #32]
 8003792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	69f9      	ldr	r1, [r7, #28]
 8003796:	6a3a      	ldr	r2, [r7, #32]
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	61bb      	str	r3, [r7, #24]
   return(result);
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e5      	bne.n	8003770 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e00f      	b.n	80037e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d09f      	beq.n	800371e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3740      	adds	r7, #64	; 0x40
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b095      	sub	sp, #84	; 0x54
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003810:	643a      	str	r2, [r7, #64]	; 0x40
 8003812:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e5      	bne.n	80037f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3314      	adds	r3, #20
 800382a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	61fb      	str	r3, [r7, #28]
   return(result);
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	64bb      	str	r3, [r7, #72]	; 0x48
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3314      	adds	r3, #20
 8003842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003844:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800384a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	2b01      	cmp	r3, #1
 800385e:	d119      	bne.n	8003894 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f023 0310 	bic.w	r3, r3, #16
 8003876:	647b      	str	r3, [r7, #68]	; 0x44
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003880:	61ba      	str	r2, [r7, #24]
 8003882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6979      	ldr	r1, [r7, #20]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	613b      	str	r3, [r7, #16]
   return(result);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e5      	bne.n	8003860 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038a2:	bf00      	nop
 80038a4:	3754      	adds	r7, #84	; 0x54
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff ff09 	bl	80036e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b21      	cmp	r3, #33	; 0x21
 80038e8:	d13e      	bne.n	8003968 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f2:	d114      	bne.n	800391e <UART_Transmit_IT+0x48>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d110      	bne.n	800391e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003910:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	1c9a      	adds	r2, r3, #2
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	621a      	str	r2, [r3, #32]
 800391c:	e008      	b.n	8003930 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	1c59      	adds	r1, r3, #1
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6211      	str	r1, [r2, #32]
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29b      	uxth	r3, r3
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4619      	mov	r1, r3
 800393e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10f      	bne.n	8003964 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003952:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003962:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fe8e 	bl	80036b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b08c      	sub	sp, #48	; 0x30
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b22      	cmp	r3, #34	; 0x22
 80039b8:	f040 80ab 	bne.w	8003b12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c4:	d117      	bne.n	80039f6 <UART_Receive_IT+0x50>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d113      	bne.n	80039f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	1c9a      	adds	r2, r3, #2
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
 80039f4:	e026      	b.n	8003a44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a08:	d007      	beq.n	8003a1a <UART_Receive_IT+0x74>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <UART_Receive_IT+0x82>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	e008      	b.n	8003a3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	4619      	mov	r1, r3
 8003a52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d15a      	bne.n	8003b0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0220 	bic.w	r2, r2, #32
 8003a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d135      	bne.n	8003b04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	613b      	str	r3, [r7, #16]
   return(result);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f023 0310 	bic.w	r3, r3, #16
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abe:	623a      	str	r2, [r7, #32]
 8003ac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	69f9      	ldr	r1, [r7, #28]
 8003ac4:	6a3a      	ldr	r2, [r7, #32]
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	61bb      	str	r3, [r7, #24]
   return(result);
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e5      	bne.n	8003a9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	2b10      	cmp	r3, #16
 8003ade:	d10a      	bne.n	8003af6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff fdf9 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
 8003b02:	e002      	b.n	8003b0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff fde1 	bl	80036cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e002      	b.n	8003b14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3730      	adds	r7, #48	; 0x30
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b20:	b0c0      	sub	sp, #256	; 0x100
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b38:	68d9      	ldr	r1, [r3, #12]
 8003b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	ea40 0301 	orr.w	r3, r0, r1
 8003b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b74:	f021 010c 	bic.w	r1, r1, #12
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b82:	430b      	orrs	r3, r1
 8003b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	6999      	ldr	r1, [r3, #24]
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	ea40 0301 	orr.w	r3, r0, r1
 8003ba2:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4b95      	ldr	r3, [pc, #596]	; (8003e00 <UART_SetConfig+0x2e4>)
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d011      	beq.n	8003bd4 <UART_SetConfig+0xb8>
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b93      	ldr	r3, [pc, #588]	; (8003e04 <UART_SetConfig+0x2e8>)
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d00b      	beq.n	8003bd4 <UART_SetConfig+0xb8>
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b91      	ldr	r3, [pc, #580]	; (8003e08 <UART_SetConfig+0x2ec>)
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d005      	beq.n	8003bd4 <UART_SetConfig+0xb8>
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b8f      	ldr	r3, [pc, #572]	; (8003e0c <UART_SetConfig+0x2f0>)
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d104      	bne.n	8003bde <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bd4:	f7fe fbe8 	bl	80023a8 <HAL_RCC_GetPCLK2Freq>
 8003bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bdc:	e003      	b.n	8003be6 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bde:	f7fe fbcf 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 8003be2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf0:	f040 8110 	bne.w	8003e14 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c06:	4622      	mov	r2, r4
 8003c08:	462b      	mov	r3, r5
 8003c0a:	1891      	adds	r1, r2, r2
 8003c0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c0e:	415b      	adcs	r3, r3
 8003c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c16:	4621      	mov	r1, r4
 8003c18:	eb12 0801 	adds.w	r8, r2, r1
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	eb43 0901 	adc.w	r9, r3, r1
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c36:	4690      	mov	r8, r2
 8003c38:	4699      	mov	r9, r3
 8003c3a:	4623      	mov	r3, r4
 8003c3c:	eb18 0303 	adds.w	r3, r8, r3
 8003c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c44:	462b      	mov	r3, r5
 8003c46:	eb49 0303 	adc.w	r3, r9, r3
 8003c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c62:	460b      	mov	r3, r1
 8003c64:	18db      	adds	r3, r3, r3
 8003c66:	653b      	str	r3, [r7, #80]	; 0x50
 8003c68:	4613      	mov	r3, r2
 8003c6a:	eb42 0303 	adc.w	r3, r2, r3
 8003c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c78:	f7fc fb2a 	bl	80002d0 <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4b63      	ldr	r3, [pc, #396]	; (8003e10 <UART_SetConfig+0x2f4>)
 8003c82:	fba3 2302 	umull	r2, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	011c      	lsls	r4, r3, #4
 8003c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	1891      	adds	r1, r2, r2
 8003ca2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ca4:	415b      	adcs	r3, r3
 8003ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cac:	4641      	mov	r1, r8
 8003cae:	eb12 0a01 	adds.w	sl, r2, r1
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ccc:	4692      	mov	sl, r2
 8003cce:	469b      	mov	fp, r3
 8003cd0:	4643      	mov	r3, r8
 8003cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8003cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8003ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	18db      	adds	r3, r3, r3
 8003cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8003cfe:	4613      	mov	r3, r2
 8003d00:	eb42 0303 	adc.w	r3, r2, r3
 8003d04:	647b      	str	r3, [r7, #68]	; 0x44
 8003d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d0e:	f7fc fadf 	bl	80002d0 <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <UART_SetConfig+0x2f4>)
 8003d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2264      	movs	r2, #100	; 0x64
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	1acb      	subs	r3, r1, r3
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d2e:	4b38      	ldr	r3, [pc, #224]	; (8003e10 <UART_SetConfig+0x2f4>)
 8003d30:	fba3 2302 	umull	r2, r3, r3, r2
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d3c:	441c      	add	r4, r3
 8003d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	1891      	adds	r1, r2, r2
 8003d56:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d58:	415b      	adcs	r3, r3
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d60:	4641      	mov	r1, r8
 8003d62:	1851      	adds	r1, r2, r1
 8003d64:	6339      	str	r1, [r7, #48]	; 0x30
 8003d66:	4649      	mov	r1, r9
 8003d68:	414b      	adcs	r3, r1
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d78:	4659      	mov	r1, fp
 8003d7a:	00cb      	lsls	r3, r1, #3
 8003d7c:	4651      	mov	r1, sl
 8003d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d82:	4651      	mov	r1, sl
 8003d84:	00ca      	lsls	r2, r1, #3
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d94:	464b      	mov	r3, r9
 8003d96:	460a      	mov	r2, r1
 8003d98:	eb42 0303 	adc.w	r3, r2, r3
 8003d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003dac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003db4:	460b      	mov	r3, r1
 8003db6:	18db      	adds	r3, r3, r3
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dba:	4613      	mov	r3, r2
 8003dbc:	eb42 0303 	adc.w	r3, r2, r3
 8003dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dca:	f7fc fa81 	bl	80002d0 <__aeabi_uldivmod>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <UART_SetConfig+0x2f4>)
 8003dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	2164      	movs	r1, #100	; 0x64
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	3332      	adds	r3, #50	; 0x32
 8003de6:	4a0a      	ldr	r2, [pc, #40]	; (8003e10 <UART_SetConfig+0x2f4>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	f003 0207 	and.w	r2, r3, #7
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4422      	add	r2, r4
 8003dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dfc:	e109      	b.n	8004012 <UART_SetConfig+0x4f6>
 8003dfe:	bf00      	nop
 8003e00:	40011000 	.word	0x40011000
 8003e04:	40011400 	.word	0x40011400
 8003e08:	40011800 	.word	0x40011800
 8003e0c:	40011c00 	.word	0x40011c00
 8003e10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e26:	4642      	mov	r2, r8
 8003e28:	464b      	mov	r3, r9
 8003e2a:	1891      	adds	r1, r2, r2
 8003e2c:	6239      	str	r1, [r7, #32]
 8003e2e:	415b      	adcs	r3, r3
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
 8003e32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e36:	4641      	mov	r1, r8
 8003e38:	1854      	adds	r4, r2, r1
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	eb43 0501 	adc.w	r5, r3, r1
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	00eb      	lsls	r3, r5, #3
 8003e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e4e:	00e2      	lsls	r2, r4, #3
 8003e50:	4614      	mov	r4, r2
 8003e52:	461d      	mov	r5, r3
 8003e54:	4643      	mov	r3, r8
 8003e56:	18e3      	adds	r3, r4, r3
 8003e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e5c:	464b      	mov	r3, r9
 8003e5e:	eb45 0303 	adc.w	r3, r5, r3
 8003e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e82:	4629      	mov	r1, r5
 8003e84:	008b      	lsls	r3, r1, #2
 8003e86:	4621      	mov	r1, r4
 8003e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	008a      	lsls	r2, r1, #2
 8003e90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e94:	f7fc fa1c 	bl	80002d0 <__aeabi_uldivmod>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4b60      	ldr	r3, [pc, #384]	; (8004020 <UART_SetConfig+0x504>)
 8003e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	011c      	lsls	r4, r3, #4
 8003ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003eb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003eb8:	4642      	mov	r2, r8
 8003eba:	464b      	mov	r3, r9
 8003ebc:	1891      	adds	r1, r2, r2
 8003ebe:	61b9      	str	r1, [r7, #24]
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec8:	4641      	mov	r1, r8
 8003eca:	1851      	adds	r1, r2, r1
 8003ecc:	6139      	str	r1, [r7, #16]
 8003ece:	4649      	mov	r1, r9
 8003ed0:	414b      	adcs	r3, r1
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	00cb      	lsls	r3, r1, #3
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eea:	4651      	mov	r1, sl
 8003eec:	00ca      	lsls	r2, r1, #3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	189b      	adds	r3, r3, r2
 8003ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003efc:	464b      	mov	r3, r9
 8003efe:	460a      	mov	r2, r1
 8003f00:	eb42 0303 	adc.w	r3, r2, r3
 8003f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f20:	4649      	mov	r1, r9
 8003f22:	008b      	lsls	r3, r1, #2
 8003f24:	4641      	mov	r1, r8
 8003f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	008a      	lsls	r2, r1, #2
 8003f2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f32:	f7fc f9cd 	bl	80002d0 <__aeabi_uldivmod>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4b39      	ldr	r3, [pc, #228]	; (8004020 <UART_SetConfig+0x504>)
 8003f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	2164      	movs	r1, #100	; 0x64
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	3332      	adds	r3, #50	; 0x32
 8003f4e:	4a34      	ldr	r2, [pc, #208]	; (8004020 <UART_SetConfig+0x504>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f5a:	441c      	add	r4, r3
 8003f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f60:	2200      	movs	r2, #0
 8003f62:	673b      	str	r3, [r7, #112]	; 0x70
 8003f64:	677a      	str	r2, [r7, #116]	; 0x74
 8003f66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f6a:	4642      	mov	r2, r8
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	1891      	adds	r1, r2, r2
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	415b      	adcs	r3, r3
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f7a:	4641      	mov	r1, r8
 8003f7c:	1851      	adds	r1, r2, r1
 8003f7e:	6039      	str	r1, [r7, #0]
 8003f80:	4649      	mov	r1, r9
 8003f82:	414b      	adcs	r3, r1
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f92:	4659      	mov	r1, fp
 8003f94:	00cb      	lsls	r3, r1, #3
 8003f96:	4651      	mov	r1, sl
 8003f98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f9c:	4651      	mov	r1, sl
 8003f9e:	00ca      	lsls	r2, r1, #3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	4642      	mov	r2, r8
 8003fa8:	189b      	adds	r3, r3, r2
 8003faa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fac:	464b      	mov	r3, r9
 8003fae:	460a      	mov	r2, r1
 8003fb0:	eb42 0303 	adc.w	r3, r2, r3
 8003fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	663b      	str	r3, [r7, #96]	; 0x60
 8003fc0:	667a      	str	r2, [r7, #100]	; 0x64
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fce:	4649      	mov	r1, r9
 8003fd0:	008b      	lsls	r3, r1, #2
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fd8:	4641      	mov	r1, r8
 8003fda:	008a      	lsls	r2, r1, #2
 8003fdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fe0:	f7fc f976 	bl	80002d0 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <UART_SetConfig+0x504>)
 8003fea:	fba3 1302 	umull	r1, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	2164      	movs	r1, #100	; 0x64
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	3332      	adds	r3, #50	; 0x32
 8003ffc:	4a08      	ldr	r2, [pc, #32]	; (8004020 <UART_SetConfig+0x504>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	f003 020f 	and.w	r2, r3, #15
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4422      	add	r2, r4
 8004010:	609a      	str	r2, [r3, #8]
}
 8004012:	bf00      	nop
 8004014:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004018:	46bd      	mov	sp, r7
 800401a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800401e:	bf00      	nop
 8004020:	51eb851f 	.word	0x51eb851f

08004024 <makeFreeRtosPriority>:
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	80fb      	strh	r3, [r7, #6]
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004036:	2b84      	cmp	r3, #132	; 0x84
 8004038:	d005      	beq.n	8004046 <makeFreeRtosPriority+0x22>
 800403a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4413      	add	r3, r2
 8004042:	3303      	adds	r3, #3
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <osKernelStart>:
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
 8004058:	f001 f80c 	bl	8005074 <vTaskStartScheduler>
 800405c:	2300      	movs	r3, #0
 800405e:	4618      	mov	r0, r3
 8004060:	bd80      	pop	{r7, pc}

08004062 <osThreadCreate>:
 8004062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004064:	b089      	sub	sp, #36	; 0x24
 8004066:	af04      	add	r7, sp, #16
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <osThreadCreate+0x54>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01c      	beq.n	80040b6 <osThreadCreate+0x54>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685c      	ldr	r4, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681d      	ldr	r5, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691e      	ldr	r6, [r3, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ffc8 	bl	8004024 <makeFreeRtosPriority>
 8004094:	4601      	mov	r1, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6992      	ldr	r2, [r2, #24]
 800409e:	9202      	str	r2, [sp, #8]
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	9100      	str	r1, [sp, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	4632      	mov	r2, r6
 80040a8:	4629      	mov	r1, r5
 80040aa:	4620      	mov	r0, r4
 80040ac:	f000 fdd1 	bl	8004c52 <xTaskCreateStatic>
 80040b0:	4603      	mov	r3, r0
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e01c      	b.n	80040f0 <osThreadCreate+0x8e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685c      	ldr	r4, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681d      	ldr	r5, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	b29e      	uxth	r6, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff ffaa 	bl	8004024 <makeFreeRtosPriority>
 80040d0:	4602      	mov	r2, r0
 80040d2:	f107 030c 	add.w	r3, r7, #12
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	9200      	str	r2, [sp, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	4632      	mov	r2, r6
 80040de:	4629      	mov	r1, r5
 80040e0:	4620      	mov	r0, r4
 80040e2:	f000 fe13 	bl	8004d0c <xTaskCreate>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d001      	beq.n	80040f0 <osThreadCreate+0x8e>
 80040ec:	2300      	movs	r3, #0
 80040ee:	e000      	b.n	80040f2 <osThreadCreate+0x90>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040fa <vListInitialise>:
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f103 0208 	add.w	r2, r3, #8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f04f 32ff 	mov.w	r2, #4294967295
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f103 0208 	add.w	r2, r3, #8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f103 0208 	add.w	r2, r3, #8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	611a      	str	r2, [r3, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <vListInitialiseItem>:
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <vListInsertEnd>:
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	609a      	str	r2, [r3, #8]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	611a      	str	r2, [r3, #16]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <vListInsert>:
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d103      	bne.n	80041bc <vListInsert+0x20>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e00c      	b.n	80041d6 <vListInsert+0x3a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3308      	adds	r3, #8
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	e002      	b.n	80041ca <vListInsert+0x2e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d2f6      	bcs.n	80041c4 <vListInsert+0x28>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	611a      	str	r2, [r3, #16]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	bf00      	nop
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <uxListRemove>:
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6892      	ldr	r2, [r2, #8]
 8004224:	609a      	str	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6852      	ldr	r2, [r2, #4]
 800422e:	605a      	str	r2, [r3, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d103      	bne.n	8004242 <uxListRemove+0x34>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	611a      	str	r2, [r3, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	1e5a      	subs	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <xQueueGenericReset>:
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <xQueueGenericReset+0x2a>
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xQueueGenericReset+0x28>
 800428e:	f001 fe51 	bl	8005f34 <vPortEnterCritical>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	68f9      	ldr	r1, [r7, #12]
 800429c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800429e:	fb01 f303 	mul.w	r3, r1, r3
 80042a2:	441a      	add	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042be:	3b01      	subs	r3, #1
 80042c0:	68f9      	ldr	r1, [r7, #12]
 80042c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	441a      	add	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	60da      	str	r2, [r3, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	22ff      	movs	r2, #255	; 0xff
 80042d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	22ff      	movs	r2, #255	; 0xff
 80042da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d114      	bne.n	800430e <xQueueGenericReset+0xaa>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d01a      	beq.n	8004322 <xQueueGenericReset+0xbe>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3310      	adds	r3, #16
 80042f0:	4618      	mov	r0, r3
 80042f2:	f001 f911 	bl	8005518 <xTaskRemoveFromEventList>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d012      	beq.n	8004322 <xQueueGenericReset+0xbe>
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <xQueueGenericReset+0xcc>)
 80042fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	e009      	b.n	8004322 <xQueueGenericReset+0xbe>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3310      	adds	r3, #16
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fef1 	bl	80040fa <vListInitialise>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3324      	adds	r3, #36	; 0x24
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff feec 	bl	80040fa <vListInitialise>
 8004322:	f001 fe37 	bl	8005f94 <vPortExitCritical>
 8004326:	2301      	movs	r3, #1
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <xQueueGenericCreate>:
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	4613      	mov	r3, r2
 8004340:	71fb      	strb	r3, [r7, #7]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <xQueueGenericCreate+0x2a>
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	bf00      	nop
 800435c:	e7fe      	b.n	800435c <xQueueGenericCreate+0x28>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	3348      	adds	r3, #72	; 0x48
 800436c:	4618      	mov	r0, r3
 800436e:	f001 fec3 	bl	80060f8 <pvPortMalloc>
 8004372:	61b8      	str	r0, [r7, #24]
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d011      	beq.n	800439e <xQueueGenericCreate+0x6a>
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	3348      	adds	r3, #72	; 0x48
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800438c:	79fa      	ldrb	r2, [r7, #7]
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	4613      	mov	r3, r2
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f805 	bl	80043a8 <prvInitialiseNewQueue>
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	4618      	mov	r0, r3
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <prvInitialiseNewQueue>:
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	70fb      	strb	r3, [r7, #3]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d103      	bne.n	80043c4 <prvInitialiseNewQueue+0x1c>
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e002      	b.n	80043ca <prvInitialiseNewQueue+0x22>
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
 80043d6:	2101      	movs	r1, #1
 80043d8:	69b8      	ldr	r0, [r7, #24]
 80043da:	f7ff ff43 	bl	8004264 <xQueueGenericReset>
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <xQueueGenericSend>:
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08e      	sub	sp, #56	; 0x38
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	2300      	movs	r3, #0
 80043f8:	637b      	str	r3, [r7, #52]	; 0x34
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	633b      	str	r3, [r7, #48]	; 0x30
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xQueueGenericSend+0x32>
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xQueueGenericSend+0x30>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <xQueueGenericSend+0x40>
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <xQueueGenericSend+0x44>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <xQueueGenericSend+0x46>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <xQueueGenericSend+0x60>
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <xQueueGenericSend+0x5e>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d103      	bne.n	8004456 <xQueueGenericSend+0x6e>
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <xQueueGenericSend+0x72>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <xQueueGenericSend+0x74>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <xQueueGenericSend+0x8e>
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	623b      	str	r3, [r7, #32]
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <xQueueGenericSend+0x8c>
 8004476:	f001 fa0b 	bl	8005890 <xTaskGetSchedulerState>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d102      	bne.n	8004486 <xQueueGenericSend+0x9e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <xQueueGenericSend+0xa2>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <xQueueGenericSend+0xa4>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <xQueueGenericSend+0xbe>
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	bf00      	nop
 80044a4:	e7fe      	b.n	80044a4 <xQueueGenericSend+0xbc>
 80044a6:	f001 fd45 	bl	8005f34 <vPortEnterCritical>
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d302      	bcc.n	80044bc <xQueueGenericSend+0xd4>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d129      	bne.n	8004510 <xQueueGenericSend+0x128>
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044c2:	f000 fab6 	bl	8004a32 <prvCopyDataToQueue>
 80044c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d010      	beq.n	80044f2 <xQueueGenericSend+0x10a>
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	3324      	adds	r3, #36	; 0x24
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 f81f 	bl	8005518 <xTaskRemoveFromEventList>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d013      	beq.n	8004508 <xQueueGenericSend+0x120>
 80044e0:	4b3f      	ldr	r3, [pc, #252]	; (80045e0 <xQueueGenericSend+0x1f8>)
 80044e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	e00a      	b.n	8004508 <xQueueGenericSend+0x120>
 80044f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <xQueueGenericSend+0x120>
 80044f8:	4b39      	ldr	r3, [pc, #228]	; (80045e0 <xQueueGenericSend+0x1f8>)
 80044fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f001 fd44 	bl	8005f94 <vPortExitCritical>
 800450c:	2301      	movs	r3, #1
 800450e:	e063      	b.n	80045d8 <xQueueGenericSend+0x1f0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d103      	bne.n	800451e <xQueueGenericSend+0x136>
 8004516:	f001 fd3d 	bl	8005f94 <vPortExitCritical>
 800451a:	2300      	movs	r3, #0
 800451c:	e05c      	b.n	80045d8 <xQueueGenericSend+0x1f0>
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <xQueueGenericSend+0x14a>
 8004524:	f107 0314 	add.w	r3, r7, #20
 8004528:	4618      	mov	r0, r3
 800452a:	f001 f857 	bl	80055dc <vTaskInternalSetTimeOutState>
 800452e:	2301      	movs	r3, #1
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
 8004532:	f001 fd2f 	bl	8005f94 <vPortExitCritical>
 8004536:	f000 fdfd 	bl	8005134 <vTaskSuspendAll>
 800453a:	f001 fcfb 	bl	8005f34 <vPortEnterCritical>
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004544:	b25b      	sxtb	r3, r3
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d103      	bne.n	8004554 <xQueueGenericSend+0x16c>
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800455a:	b25b      	sxtb	r3, r3
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004560:	d103      	bne.n	800456a <xQueueGenericSend+0x182>
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800456a:	f001 fd13 	bl	8005f94 <vPortExitCritical>
 800456e:	1d3a      	adds	r2, r7, #4
 8004570:	f107 0314 	add.w	r3, r7, #20
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f001 f846 	bl	8005608 <xTaskCheckForTimeOut>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d124      	bne.n	80045cc <xQueueGenericSend+0x1e4>
 8004582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004584:	f000 fb4d 	bl	8004c22 <prvIsQueueFull>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d018      	beq.n	80045c0 <xQueueGenericSend+0x1d8>
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	3310      	adds	r3, #16
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	4611      	mov	r1, r2
 8004596:	4618      	mov	r0, r3
 8004598:	f000 ff9a 	bl	80054d0 <vTaskPlaceOnEventList>
 800459c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800459e:	f000 fad8 	bl	8004b52 <prvUnlockQueue>
 80045a2:	f000 fdd5 	bl	8005150 <xTaskResumeAll>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f47f af7c 	bne.w	80044a6 <xQueueGenericSend+0xbe>
 80045ae:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <xQueueGenericSend+0x1f8>)
 80045b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	e772      	b.n	80044a6 <xQueueGenericSend+0xbe>
 80045c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045c2:	f000 fac6 	bl	8004b52 <prvUnlockQueue>
 80045c6:	f000 fdc3 	bl	8005150 <xTaskResumeAll>
 80045ca:	e76c      	b.n	80044a6 <xQueueGenericSend+0xbe>
 80045cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ce:	f000 fac0 	bl	8004b52 <prvUnlockQueue>
 80045d2:	f000 fdbd 	bl	8005150 <xTaskResumeAll>
 80045d6:	2300      	movs	r3, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	3738      	adds	r7, #56	; 0x38
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	e000ed04 	.word	0xe000ed04

080045e4 <xQueueReceive>:
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08c      	sub	sp, #48	; 0x30
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	2300      	movs	r3, #0
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <xQueueReceive+0x30>
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	623b      	str	r3, [r7, #32]
 8004610:	bf00      	nop
 8004612:	e7fe      	b.n	8004612 <xQueueReceive+0x2e>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <xQueueReceive+0x3e>
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <xQueueReceive+0x42>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <xQueueReceive+0x44>
 8004626:	2300      	movs	r3, #0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <xQueueReceive+0x5e>
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <xQueueReceive+0x5c>
 8004642:	f001 f925 	bl	8005890 <xTaskGetSchedulerState>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <xQueueReceive+0x6e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <xQueueReceive+0x72>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <xQueueReceive+0x74>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <xQueueReceive+0x8e>
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <xQueueReceive+0x8c>
 8004672:	f001 fc5f 	bl	8005f34 <vPortEnterCritical>
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01f      	beq.n	80046c2 <xQueueReceive+0xde>
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004686:	f000 fa3e 	bl	8004b06 <prvCopyDataFromQueue>
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	1e5a      	subs	r2, r3, #1
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
 8004692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00f      	beq.n	80046ba <xQueueReceive+0xd6>
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	3310      	adds	r3, #16
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 ff3a 	bl	8005518 <xTaskRemoveFromEventList>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <xQueueReceive+0xd6>
 80046aa:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <xQueueReceive+0x1bc>)
 80046ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f001 fc6b 	bl	8005f94 <vPortExitCritical>
 80046be:	2301      	movs	r3, #1
 80046c0:	e069      	b.n	8004796 <xQueueReceive+0x1b2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <xQueueReceive+0xec>
 80046c8:	f001 fc64 	bl	8005f94 <vPortExitCritical>
 80046cc:	2300      	movs	r3, #0
 80046ce:	e062      	b.n	8004796 <xQueueReceive+0x1b2>
 80046d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <xQueueReceive+0x100>
 80046d6:	f107 0310 	add.w	r3, r7, #16
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 ff7e 	bl	80055dc <vTaskInternalSetTimeOutState>
 80046e0:	2301      	movs	r3, #1
 80046e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e4:	f001 fc56 	bl	8005f94 <vPortExitCritical>
 80046e8:	f000 fd24 	bl	8005134 <vTaskSuspendAll>
 80046ec:	f001 fc22 	bl	8005f34 <vPortEnterCritical>
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046f6:	b25b      	sxtb	r3, r3
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d103      	bne.n	8004706 <xQueueReceive+0x122>
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800470c:	b25b      	sxtb	r3, r3
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004712:	d103      	bne.n	800471c <xQueueReceive+0x138>
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800471c:	f001 fc3a 	bl	8005f94 <vPortExitCritical>
 8004720:	1d3a      	adds	r2, r7, #4
 8004722:	f107 0310 	add.w	r3, r7, #16
 8004726:	4611      	mov	r1, r2
 8004728:	4618      	mov	r0, r3
 800472a:	f000 ff6d 	bl	8005608 <xTaskCheckForTimeOut>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d123      	bne.n	800477c <xQueueReceive+0x198>
 8004734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004736:	f000 fa5e 	bl	8004bf6 <prvIsQueueEmpty>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d017      	beq.n	8004770 <xQueueReceive+0x18c>
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	3324      	adds	r3, #36	; 0x24
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fec1 	bl	80054d0 <vTaskPlaceOnEventList>
 800474e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004750:	f000 f9ff 	bl	8004b52 <prvUnlockQueue>
 8004754:	f000 fcfc 	bl	8005150 <xTaskResumeAll>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d189      	bne.n	8004672 <xQueueReceive+0x8e>
 800475e:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <xQueueReceive+0x1bc>)
 8004760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	e780      	b.n	8004672 <xQueueReceive+0x8e>
 8004770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004772:	f000 f9ee 	bl	8004b52 <prvUnlockQueue>
 8004776:	f000 fceb 	bl	8005150 <xTaskResumeAll>
 800477a:	e77a      	b.n	8004672 <xQueueReceive+0x8e>
 800477c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800477e:	f000 f9e8 	bl	8004b52 <prvUnlockQueue>
 8004782:	f000 fce5 	bl	8005150 <xTaskResumeAll>
 8004786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004788:	f000 fa35 	bl	8004bf6 <prvIsQueueEmpty>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	f43f af6f 	beq.w	8004672 <xQueueReceive+0x8e>
 8004794:	2300      	movs	r3, #0
 8004796:	4618      	mov	r0, r3
 8004798:	3730      	adds	r7, #48	; 0x30
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <xQueueSemaphoreTake>:
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08e      	sub	sp, #56	; 0x38
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
 80047ae:	2300      	movs	r3, #0
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b6:	2300      	movs	r3, #0
 80047b8:	633b      	str	r3, [r7, #48]	; 0x30
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <xQueueSemaphoreTake+0x32>
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	623b      	str	r3, [r7, #32]
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <xQueueSemaphoreTake+0x30>
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <xQueueSemaphoreTake+0x50>
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <xQueueSemaphoreTake+0x4e>
 80047f4:	f001 f84c 	bl	8005890 <xTaskGetSchedulerState>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <xQueueSemaphoreTake+0x60>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <xQueueSemaphoreTake+0x64>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <xQueueSemaphoreTake+0x66>
 8004808:	2300      	movs	r3, #0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <xQueueSemaphoreTake+0x80>
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	bf00      	nop
 8004822:	e7fe      	b.n	8004822 <xQueueSemaphoreTake+0x7e>
 8004824:	f001 fb86 	bl	8005f34 <vPortEnterCritical>
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d024      	beq.n	800487e <xQueueSemaphoreTake+0xda>
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	1e5a      	subs	r2, r3, #1
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d104      	bne.n	800484e <xQueueSemaphoreTake+0xaa>
 8004844:	f001 f9cc 	bl	8005be0 <pvTaskIncrementMutexHeldCount>
 8004848:	4602      	mov	r2, r0
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	609a      	str	r2, [r3, #8]
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00f      	beq.n	8004876 <xQueueSemaphoreTake+0xd2>
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	3310      	adds	r3, #16
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fe5c 	bl	8005518 <xTaskRemoveFromEventList>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <xQueueSemaphoreTake+0xd2>
 8004866:	4b54      	ldr	r3, [pc, #336]	; (80049b8 <xQueueSemaphoreTake+0x214>)
 8004868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f001 fb8d 	bl	8005f94 <vPortExitCritical>
 800487a:	2301      	movs	r3, #1
 800487c:	e097      	b.n	80049ae <xQueueSemaphoreTake+0x20a>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d111      	bne.n	80048a8 <xQueueSemaphoreTake+0x104>
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <xQueueSemaphoreTake+0xfc>
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <xQueueSemaphoreTake+0xfa>
 80048a0:	f001 fb78 	bl	8005f94 <vPortExitCritical>
 80048a4:	2300      	movs	r3, #0
 80048a6:	e082      	b.n	80049ae <xQueueSemaphoreTake+0x20a>
 80048a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <xQueueSemaphoreTake+0x118>
 80048ae:	f107 030c 	add.w	r3, r7, #12
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fe92 	bl	80055dc <vTaskInternalSetTimeOutState>
 80048b8:	2301      	movs	r3, #1
 80048ba:	637b      	str	r3, [r7, #52]	; 0x34
 80048bc:	f001 fb6a 	bl	8005f94 <vPortExitCritical>
 80048c0:	f000 fc38 	bl	8005134 <vTaskSuspendAll>
 80048c4:	f001 fb36 	bl	8005f34 <vPortEnterCritical>
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048ce:	b25b      	sxtb	r3, r3
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d103      	bne.n	80048de <xQueueSemaphoreTake+0x13a>
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d103      	bne.n	80048f4 <xQueueSemaphoreTake+0x150>
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048f4:	f001 fb4e 	bl	8005f94 <vPortExitCritical>
 80048f8:	463a      	mov	r2, r7
 80048fa:	f107 030c 	add.w	r3, r7, #12
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fe81 	bl	8005608 <xTaskCheckForTimeOut>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d132      	bne.n	8004972 <xQueueSemaphoreTake+0x1ce>
 800490c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800490e:	f000 f972 	bl	8004bf6 <prvIsQueueEmpty>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d026      	beq.n	8004966 <xQueueSemaphoreTake+0x1c2>
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <xQueueSemaphoreTake+0x190>
 8004920:	f001 fb08 	bl	8005f34 <vPortEnterCritical>
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 ffcf 	bl	80058cc <xTaskPriorityInherit>
 800492e:	6338      	str	r0, [r7, #48]	; 0x30
 8004930:	f001 fb30 	bl	8005f94 <vPortExitCritical>
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	3324      	adds	r3, #36	; 0x24
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	4611      	mov	r1, r2
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fdc7 	bl	80054d0 <vTaskPlaceOnEventList>
 8004942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004944:	f000 f905 	bl	8004b52 <prvUnlockQueue>
 8004948:	f000 fc02 	bl	8005150 <xTaskResumeAll>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	f47f af68 	bne.w	8004824 <xQueueSemaphoreTake+0x80>
 8004954:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <xQueueSemaphoreTake+0x214>)
 8004956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	e75e      	b.n	8004824 <xQueueSemaphoreTake+0x80>
 8004966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004968:	f000 f8f3 	bl	8004b52 <prvUnlockQueue>
 800496c:	f000 fbf0 	bl	8005150 <xTaskResumeAll>
 8004970:	e758      	b.n	8004824 <xQueueSemaphoreTake+0x80>
 8004972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004974:	f000 f8ed 	bl	8004b52 <prvUnlockQueue>
 8004978:	f000 fbea 	bl	8005150 <xTaskResumeAll>
 800497c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800497e:	f000 f93a 	bl	8004bf6 <prvIsQueueEmpty>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	f43f af4d 	beq.w	8004824 <xQueueSemaphoreTake+0x80>
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00d      	beq.n	80049ac <xQueueSemaphoreTake+0x208>
 8004990:	f001 fad0 	bl	8005f34 <vPortEnterCritical>
 8004994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004996:	f000 f834 	bl	8004a02 <prvGetDisinheritPriorityAfterTimeout>
 800499a:	6278      	str	r0, [r7, #36]	; 0x24
 800499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049a2:	4618      	mov	r0, r3
 80049a4:	f001 f88e 	bl	8005ac4 <vTaskPriorityDisinheritAfterTimeout>
 80049a8:	f001 faf4 	bl	8005f94 <vPortExitCritical>
 80049ac:	2300      	movs	r3, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	3738      	adds	r7, #56	; 0x38
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <uxQueueSpacesAvailable>:
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <uxQueueSpacesAvailable+0x28>
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <uxQueueSpacesAvailable+0x26>
 80049e4:	f001 faa6 	bl	8005f34 <vPortEnterCritical>
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	f001 face 	bl	8005f94 <vPortExitCritical>
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <prvGetDisinheritPriorityAfterTimeout>:
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d006      	beq.n	8004a20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f1c3 0307 	rsb	r3, r3, #7
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e001      	b.n	8004a24 <prvGetDisinheritPriorityAfterTimeout+0x22>
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <prvCopyDataToQueue>:
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b086      	sub	sp, #24
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10d      	bne.n	8004a6c <prvCopyDataToQueue+0x3a>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d14d      	bne.n	8004af4 <prvCopyDataToQueue+0xc2>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 ffab 	bl	80059b8 <xTaskPriorityDisinherit>
 8004a62:	6178      	str	r0, [r7, #20]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	e043      	b.n	8004af4 <prvCopyDataToQueue+0xc2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d119      	bne.n	8004aa6 <prvCopyDataToQueue+0x74>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6858      	ldr	r0, [r3, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	f001 fd4f 	bl	8006520 <memcpy>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	441a      	add	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	605a      	str	r2, [r3, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d32b      	bcc.n	8004af4 <prvCopyDataToQueue+0xc2>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	605a      	str	r2, [r3, #4]
 8004aa4:	e026      	b.n	8004af4 <prvCopyDataToQueue+0xc2>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	68d8      	ldr	r0, [r3, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	f001 fd35 	bl	8006520 <memcpy>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	425b      	negs	r3, r3
 8004ac0:	441a      	add	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d207      	bcs.n	8004ae2 <prvCopyDataToQueue+0xb0>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	425b      	negs	r3, r3
 8004adc:	441a      	add	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d105      	bne.n	8004af4 <prvCopyDataToQueue+0xc2>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <prvCopyDataToQueue+0xc2>
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <prvCopyDataFromQueue>:
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d018      	beq.n	8004b4a <prvCopyDataFromQueue+0x44>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	441a      	add	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d303      	bcc.n	8004b3a <prvCopyDataFromQueue+0x34>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68d9      	ldr	r1, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	461a      	mov	r2, r3
 8004b44:	6838      	ldr	r0, [r7, #0]
 8004b46:	f001 fceb 	bl	8006520 <memcpy>
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <prvUnlockQueue>:
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	f001 f9eb 	bl	8005f34 <vPortEnterCritical>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b64:	73fb      	strb	r3, [r7, #15]
 8004b66:	e011      	b.n	8004b8c <prvUnlockQueue+0x3a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d012      	beq.n	8004b96 <prvUnlockQueue+0x44>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3324      	adds	r3, #36	; 0x24
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fccf 	bl	8005518 <xTaskRemoveFromEventList>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <prvUnlockQueue+0x32>
 8004b80:	f000 fda4 	bl	80056cc <vTaskMissedYield>
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	73fb      	strb	r3, [r7, #15]
 8004b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	dce9      	bgt.n	8004b68 <prvUnlockQueue+0x16>
 8004b94:	e000      	b.n	8004b98 <prvUnlockQueue+0x46>
 8004b96:	bf00      	nop
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	22ff      	movs	r2, #255	; 0xff
 8004b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ba0:	f001 f9f8 	bl	8005f94 <vPortExitCritical>
 8004ba4:	f001 f9c6 	bl	8005f34 <vPortEnterCritical>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bae:	73bb      	strb	r3, [r7, #14]
 8004bb0:	e011      	b.n	8004bd6 <prvUnlockQueue+0x84>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d012      	beq.n	8004be0 <prvUnlockQueue+0x8e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3310      	adds	r3, #16
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fcaa 	bl	8005518 <xTaskRemoveFromEventList>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <prvUnlockQueue+0x7c>
 8004bca:	f000 fd7f 	bl	80056cc <vTaskMissedYield>
 8004bce:	7bbb      	ldrb	r3, [r7, #14]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	73bb      	strb	r3, [r7, #14]
 8004bd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	dce9      	bgt.n	8004bb2 <prvUnlockQueue+0x60>
 8004bde:	e000      	b.n	8004be2 <prvUnlockQueue+0x90>
 8004be0:	bf00      	nop
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	22ff      	movs	r2, #255	; 0xff
 8004be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bea:	f001 f9d3 	bl	8005f94 <vPortExitCritical>
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <prvIsQueueEmpty>:
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	f001 f999 	bl	8005f34 <vPortEnterCritical>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d102      	bne.n	8004c10 <prvIsQueueEmpty+0x1a>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e001      	b.n	8004c14 <prvIsQueueEmpty+0x1e>
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	f001 f9be 	bl	8005f94 <vPortExitCritical>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <prvIsQueueFull>:
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	f001 f983 	bl	8005f34 <vPortEnterCritical>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d102      	bne.n	8004c40 <prvIsQueueFull+0x1e>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e001      	b.n	8004c44 <prvIsQueueFull+0x22>
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	f001 f9a6 	bl	8005f94 <vPortExitCritical>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <xTaskCreateStatic>:
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b08e      	sub	sp, #56	; 0x38
 8004c56:	af04      	add	r7, sp, #16
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10a      	bne.n	8004c7c <xTaskCreateStatic+0x2a>
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	623b      	str	r3, [r7, #32]
 8004c78:	bf00      	nop
 8004c7a:	e7fe      	b.n	8004c7a <xTaskCreateStatic+0x28>
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <xTaskCreateStatic+0x46>
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <xTaskCreateStatic+0x44>
 8004c98:	2354      	movs	r3, #84	; 0x54
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b54      	cmp	r3, #84	; 0x54
 8004ca0:	d00a      	beq.n	8004cb8 <xTaskCreateStatic+0x66>
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	bf00      	nop
 8004cb6:	e7fe      	b.n	8004cb6 <xTaskCreateStatic+0x64>
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01e      	beq.n	8004cfe <xTaskCreateStatic+0xac>
 8004cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01b      	beq.n	8004cfe <xTaskCreateStatic+0xac>
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004cd8:	2300      	movs	r3, #0
 8004cda:	9303      	str	r3, [sp, #12]
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	9302      	str	r3, [sp, #8]
 8004ce0:	f107 0314 	add.w	r3, r7, #20
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f850 	bl	8004d96 <prvInitialiseNewTask>
 8004cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cf8:	f000 f8d4 	bl	8004ea4 <prvAddNewTaskToReadyList>
 8004cfc:	e001      	b.n	8004d02 <xTaskCreateStatic+0xb0>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	4618      	mov	r0, r3
 8004d06:	3728      	adds	r7, #40	; 0x28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <xTaskCreate>:
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08c      	sub	sp, #48	; 0x30
 8004d10:	af04      	add	r7, sp, #16
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	80fb      	strh	r3, [r7, #6]
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 f9e9 	bl	80060f8 <pvPortMalloc>
 8004d26:	6178      	str	r0, [r7, #20]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00e      	beq.n	8004d4c <xTaskCreate+0x40>
 8004d2e:	2054      	movs	r0, #84	; 0x54
 8004d30:	f001 f9e2 	bl	80060f8 <pvPortMalloc>
 8004d34:	61f8      	str	r0, [r7, #28]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <xTaskCreate+0x38>
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
 8004d42:	e005      	b.n	8004d50 <xTaskCreate+0x44>
 8004d44:	6978      	ldr	r0, [r7, #20]
 8004d46:	f001 faa3 	bl	8006290 <vPortFree>
 8004d4a:	e001      	b.n	8004d50 <xTaskCreate+0x44>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61fb      	str	r3, [r7, #28]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d017      	beq.n	8004d86 <xTaskCreate+0x7a>
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	2300      	movs	r3, #0
 8004d62:	9303      	str	r3, [sp, #12]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	9302      	str	r3, [sp, #8]
 8004d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f80e 	bl	8004d96 <prvInitialiseNewTask>
 8004d7a:	69f8      	ldr	r0, [r7, #28]
 8004d7c:	f000 f892 	bl	8004ea4 <prvAddNewTaskToReadyList>
 8004d80:	2301      	movs	r3, #1
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	e002      	b.n	8004d8c <xTaskCreate+0x80>
 8004d86:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <prvInitialiseNewTask>:
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b088      	sub	sp, #32
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004dae:	3b01      	subs	r3, #1
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f023 0307 	bic.w	r3, r3, #7
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <prvInitialiseNewTask+0x48>
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <prvInitialiseNewTask+0x46>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01f      	beq.n	8004e24 <prvInitialiseNewTask+0x8e>
 8004de4:	2300      	movs	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	e012      	b.n	8004e10 <prvInitialiseNewTask+0x7a>
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	4413      	add	r3, r2
 8004df0:	7819      	ldrb	r1, [r3, #0]
 8004df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4413      	add	r3, r2
 8004df8:	3334      	adds	r3, #52	; 0x34
 8004dfa:	460a      	mov	r2, r1
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	4413      	add	r3, r2
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <prvInitialiseNewTask+0x82>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	2b0f      	cmp	r3, #15
 8004e14:	d9e9      	bls.n	8004dea <prvInitialiseNewTask+0x54>
 8004e16:	e000      	b.n	8004e1a <prvInitialiseNewTask+0x84>
 8004e18:	bf00      	nop
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e22:	e003      	b.n	8004e2c <prvInitialiseNewTask+0x96>
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	2b06      	cmp	r3, #6
 8004e30:	d901      	bls.n	8004e36 <prvInitialiseNewTask+0xa0>
 8004e32:	2306      	movs	r3, #6
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	2200      	movs	r2, #0
 8004e46:	649a      	str	r2, [r3, #72]	; 0x48
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff f974 	bl	800413a <vListInitialiseItem>
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	3318      	adds	r3, #24
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff f96f 	bl	800413a <vListInitialiseItem>
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e60:	611a      	str	r2, [r3, #16]
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	f1c3 0207 	rsb	r2, r3, #7
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	619a      	str	r2, [r3, #24]
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	2200      	movs	r2, #0
 8004e76:	64da      	str	r2, [r3, #76]	; 0x4c
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	69b8      	ldr	r0, [r7, #24]
 8004e86:	f000 ff25 	bl	8005cd4 <pxPortInitialiseStack>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <prvInitialiseNewTask+0x106>
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	bf00      	nop
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <prvAddNewTaskToReadyList>:
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	f001 f842 	bl	8005f34 <vPortEnterCritical>
 8004eb0:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <prvAddNewTaskToReadyList+0xb8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	4a29      	ldr	r2, [pc, #164]	; (8004f5c <prvAddNewTaskToReadyList+0xb8>)
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <prvAddNewTaskToReadyList+0xbc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <prvAddNewTaskToReadyList+0x32>
 8004ec2:	4a27      	ldr	r2, [pc, #156]	; (8004f60 <prvAddNewTaskToReadyList+0xbc>)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	4b24      	ldr	r3, [pc, #144]	; (8004f5c <prvAddNewTaskToReadyList+0xb8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d110      	bne.n	8004ef2 <prvAddNewTaskToReadyList+0x4e>
 8004ed0:	f000 fc20 	bl	8005714 <prvInitialiseTaskLists>
 8004ed4:	e00d      	b.n	8004ef2 <prvAddNewTaskToReadyList+0x4e>
 8004ed6:	4b23      	ldr	r3, [pc, #140]	; (8004f64 <prvAddNewTaskToReadyList+0xc0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <prvAddNewTaskToReadyList+0x4e>
 8004ede:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <prvAddNewTaskToReadyList+0xbc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d802      	bhi.n	8004ef2 <prvAddNewTaskToReadyList+0x4e>
 8004eec:	4a1c      	ldr	r2, [pc, #112]	; (8004f60 <prvAddNewTaskToReadyList+0xbc>)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <prvAddNewTaskToReadyList+0xc4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	4a1b      	ldr	r2, [pc, #108]	; (8004f68 <prvAddNewTaskToReadyList+0xc4>)
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	2201      	movs	r2, #1
 8004f02:	409a      	lsls	r2, r3
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <prvAddNewTaskToReadyList+0xc8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <prvAddNewTaskToReadyList+0xc8>)
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <prvAddNewTaskToReadyList+0xcc>)
 8004f1c:	441a      	add	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3304      	adds	r3, #4
 8004f22:	4619      	mov	r1, r3
 8004f24:	4610      	mov	r0, r2
 8004f26:	f7ff f915 	bl	8004154 <vListInsertEnd>
 8004f2a:	f001 f833 	bl	8005f94 <vPortExitCritical>
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <prvAddNewTaskToReadyList+0xc0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00e      	beq.n	8004f54 <prvAddNewTaskToReadyList+0xb0>
 8004f36:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <prvAddNewTaskToReadyList+0xbc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d207      	bcs.n	8004f54 <prvAddNewTaskToReadyList+0xb0>
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <prvAddNewTaskToReadyList+0xd0>)
 8004f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	bf00      	nop
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	2000053c 	.word	0x2000053c
 8004f60:	2000043c 	.word	0x2000043c
 8004f64:	20000548 	.word	0x20000548
 8004f68:	20000558 	.word	0x20000558
 8004f6c:	20000544 	.word	0x20000544
 8004f70:	20000440 	.word	0x20000440
 8004f74:	e000ed04 	.word	0xe000ed04

08004f78 <vTaskDelayUntil>:
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	2300      	movs	r3, #0
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <vTaskDelayUntil+0x2a>
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <vTaskDelayUntil+0x28>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <vTaskDelayUntil+0x46>
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <vTaskDelayUntil+0x44>
 8004fbe:	4b2a      	ldr	r3, [pc, #168]	; (8005068 <vTaskDelayUntil+0xf0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <vTaskDelayUntil+0x64>
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	bf00      	nop
 8004fda:	e7fe      	b.n	8004fda <vTaskDelayUntil+0x62>
 8004fdc:	f000 f8aa 	bl	8005134 <vTaskSuspendAll>
 8004fe0:	4b22      	ldr	r3, [pc, #136]	; (800506c <vTaskDelayUntil+0xf4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	623b      	str	r3, [r7, #32]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	4413      	add	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a3a      	ldr	r2, [r7, #32]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d20b      	bcs.n	8005012 <vTaskDelayUntil+0x9a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	429a      	cmp	r2, r3
 8005002:	d211      	bcs.n	8005028 <vTaskDelayUntil+0xb0>
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	429a      	cmp	r2, r3
 800500a:	d90d      	bls.n	8005028 <vTaskDelayUntil+0xb0>
 800500c:	2301      	movs	r3, #1
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
 8005010:	e00a      	b.n	8005028 <vTaskDelayUntil+0xb0>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	429a      	cmp	r2, r3
 800501a:	d303      	bcc.n	8005024 <vTaskDelayUntil+0xac>
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	429a      	cmp	r2, r3
 8005022:	d901      	bls.n	8005028 <vTaskDelayUntil+0xb0>
 8005024:	2301      	movs	r3, #1
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	d006      	beq.n	8005042 <vTaskDelayUntil+0xca>
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fde3 	bl	8005c08 <prvAddCurrentTaskToDelayedList>
 8005042:	f000 f885 	bl	8005150 <xTaskResumeAll>
 8005046:	61b8      	str	r0, [r7, #24]
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d107      	bne.n	800505e <vTaskDelayUntil+0xe6>
 800504e:	4b08      	ldr	r3, [pc, #32]	; (8005070 <vTaskDelayUntil+0xf8>)
 8005050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	bf00      	nop
 8005060:	3728      	adds	r7, #40	; 0x28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000564 	.word	0x20000564
 800506c:	20000540 	.word	0x20000540
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <vTaskStartScheduler>:
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af04      	add	r7, sp, #16
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	463a      	mov	r2, r7
 8005084:	1d39      	adds	r1, r7, #4
 8005086:	f107 0308 	add.w	r3, r7, #8
 800508a:	4618      	mov	r0, r3
 800508c:	f7fb faa2 	bl	80005d4 <vApplicationGetIdleTaskMemory>
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	9202      	str	r2, [sp, #8]
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	2300      	movs	r3, #0
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	460a      	mov	r2, r1
 80050a2:	491e      	ldr	r1, [pc, #120]	; (800511c <vTaskStartScheduler+0xa8>)
 80050a4:	481e      	ldr	r0, [pc, #120]	; (8005120 <vTaskStartScheduler+0xac>)
 80050a6:	f7ff fdd4 	bl	8004c52 <xTaskCreateStatic>
 80050aa:	4603      	mov	r3, r0
 80050ac:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <vTaskStartScheduler+0xb0>)
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	4b1c      	ldr	r3, [pc, #112]	; (8005124 <vTaskStartScheduler+0xb0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <vTaskStartScheduler+0x4a>
 80050b8:	2301      	movs	r3, #1
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e001      	b.n	80050c2 <vTaskStartScheduler+0x4e>
 80050be:	2300      	movs	r3, #0
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d116      	bne.n	80050f6 <vTaskStartScheduler+0x82>
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	bf00      	nop
 80050dc:	4b12      	ldr	r3, [pc, #72]	; (8005128 <vTaskStartScheduler+0xb4>)
 80050de:	f04f 32ff 	mov.w	r2, #4294967295
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	4b11      	ldr	r3, [pc, #68]	; (800512c <vTaskStartScheduler+0xb8>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	4b11      	ldr	r3, [pc, #68]	; (8005130 <vTaskStartScheduler+0xbc>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f000 fe7e 	bl	8005df0 <xPortStartScheduler>
 80050f4:	e00e      	b.n	8005114 <vTaskStartScheduler+0xa0>
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d10a      	bne.n	8005114 <vTaskStartScheduler+0xa0>
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <vTaskStartScheduler+0x9e>
 8005114:	bf00      	nop
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	08006ef8 	.word	0x08006ef8
 8005120:	080056e5 	.word	0x080056e5
 8005124:	20000560 	.word	0x20000560
 8005128:	2000055c 	.word	0x2000055c
 800512c:	20000548 	.word	0x20000548
 8005130:	20000540 	.word	0x20000540

08005134 <vTaskSuspendAll>:
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
 8005138:	4b04      	ldr	r3, [pc, #16]	; (800514c <vTaskSuspendAll+0x18>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	4a03      	ldr	r2, [pc, #12]	; (800514c <vTaskSuspendAll+0x18>)
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	bf00      	nop
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	20000564 	.word	0x20000564

08005150 <xTaskResumeAll>:
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	2300      	movs	r3, #0
 800515c:	60bb      	str	r3, [r7, #8]
 800515e:	4b41      	ldr	r3, [pc, #260]	; (8005264 <xTaskResumeAll+0x114>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10a      	bne.n	800517c <xTaskResumeAll+0x2c>
 8005166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	bf00      	nop
 800517a:	e7fe      	b.n	800517a <xTaskResumeAll+0x2a>
 800517c:	f000 feda 	bl	8005f34 <vPortEnterCritical>
 8005180:	4b38      	ldr	r3, [pc, #224]	; (8005264 <xTaskResumeAll+0x114>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3b01      	subs	r3, #1
 8005186:	4a37      	ldr	r2, [pc, #220]	; (8005264 <xTaskResumeAll+0x114>)
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	4b36      	ldr	r3, [pc, #216]	; (8005264 <xTaskResumeAll+0x114>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d161      	bne.n	8005256 <xTaskResumeAll+0x106>
 8005192:	4b35      	ldr	r3, [pc, #212]	; (8005268 <xTaskResumeAll+0x118>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d05d      	beq.n	8005256 <xTaskResumeAll+0x106>
 800519a:	e02e      	b.n	80051fa <xTaskResumeAll+0xaa>
 800519c:	4b33      	ldr	r3, [pc, #204]	; (800526c <xTaskResumeAll+0x11c>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3318      	adds	r3, #24
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff f830 	bl	800420e <uxListRemove>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff f82b 	bl	800420e <uxListRemove>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	2201      	movs	r2, #1
 80051be:	409a      	lsls	r2, r3
 80051c0:	4b2b      	ldr	r3, [pc, #172]	; (8005270 <xTaskResumeAll+0x120>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	4a2a      	ldr	r2, [pc, #168]	; (8005270 <xTaskResumeAll+0x120>)
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4a27      	ldr	r2, [pc, #156]	; (8005274 <xTaskResumeAll+0x124>)
 80051d8:	441a      	add	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3304      	adds	r3, #4
 80051de:	4619      	mov	r1, r3
 80051e0:	4610      	mov	r0, r2
 80051e2:	f7fe ffb7 	bl	8004154 <vListInsertEnd>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ea:	4b23      	ldr	r3, [pc, #140]	; (8005278 <xTaskResumeAll+0x128>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d302      	bcc.n	80051fa <xTaskResumeAll+0xaa>
 80051f4:	4b21      	ldr	r3, [pc, #132]	; (800527c <xTaskResumeAll+0x12c>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	4b1c      	ldr	r3, [pc, #112]	; (800526c <xTaskResumeAll+0x11c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1cc      	bne.n	800519c <xTaskResumeAll+0x4c>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <xTaskResumeAll+0xbc>
 8005208:	f000 fb22 	bl	8005850 <prvResetNextTaskUnblockTime>
 800520c:	4b1c      	ldr	r3, [pc, #112]	; (8005280 <xTaskResumeAll+0x130>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d010      	beq.n	800523a <xTaskResumeAll+0xea>
 8005218:	f000 f846 	bl	80052a8 <xTaskIncrementTick>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <xTaskResumeAll+0xd8>
 8005222:	4b16      	ldr	r3, [pc, #88]	; (800527c <xTaskResumeAll+0x12c>)
 8005224:	2201      	movs	r2, #1
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3b01      	subs	r3, #1
 800522c:	607b      	str	r3, [r7, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f1      	bne.n	8005218 <xTaskResumeAll+0xc8>
 8005234:	4b12      	ldr	r3, [pc, #72]	; (8005280 <xTaskResumeAll+0x130>)
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <xTaskResumeAll+0x12c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d009      	beq.n	8005256 <xTaskResumeAll+0x106>
 8005242:	2301      	movs	r3, #1
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <xTaskResumeAll+0x134>)
 8005248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f000 fe9d 	bl	8005f94 <vPortExitCritical>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20000564 	.word	0x20000564
 8005268:	2000053c 	.word	0x2000053c
 800526c:	200004fc 	.word	0x200004fc
 8005270:	20000544 	.word	0x20000544
 8005274:	20000440 	.word	0x20000440
 8005278:	2000043c 	.word	0x2000043c
 800527c:	20000550 	.word	0x20000550
 8005280:	2000054c 	.word	0x2000054c
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <xTaskGetTickCount>:
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <xTaskGetTickCount+0x1c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	607b      	str	r3, [r7, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	20000540 	.word	0x20000540

080052a8 <xTaskIncrementTick>:
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	4b4e      	ldr	r3, [pc, #312]	; (80053ec <xTaskIncrementTick+0x144>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f040 808e 	bne.w	80053d8 <xTaskIncrementTick+0x130>
 80052bc:	4b4c      	ldr	r3, [pc, #304]	; (80053f0 <xTaskIncrementTick+0x148>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3301      	adds	r3, #1
 80052c2:	613b      	str	r3, [r7, #16]
 80052c4:	4a4a      	ldr	r2, [pc, #296]	; (80053f0 <xTaskIncrementTick+0x148>)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d120      	bne.n	8005312 <xTaskIncrementTick+0x6a>
 80052d0:	4b48      	ldr	r3, [pc, #288]	; (80053f4 <xTaskIncrementTick+0x14c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <xTaskIncrementTick+0x48>
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	bf00      	nop
 80052ee:	e7fe      	b.n	80052ee <xTaskIncrementTick+0x46>
 80052f0:	4b40      	ldr	r3, [pc, #256]	; (80053f4 <xTaskIncrementTick+0x14c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	4b40      	ldr	r3, [pc, #256]	; (80053f8 <xTaskIncrementTick+0x150>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a3e      	ldr	r2, [pc, #248]	; (80053f4 <xTaskIncrementTick+0x14c>)
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	4a3e      	ldr	r2, [pc, #248]	; (80053f8 <xTaskIncrementTick+0x150>)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	4b3d      	ldr	r3, [pc, #244]	; (80053fc <xTaskIncrementTick+0x154>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3301      	adds	r3, #1
 800530a:	4a3c      	ldr	r2, [pc, #240]	; (80053fc <xTaskIncrementTick+0x154>)
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	f000 fa9f 	bl	8005850 <prvResetNextTaskUnblockTime>
 8005312:	4b3b      	ldr	r3, [pc, #236]	; (8005400 <xTaskIncrementTick+0x158>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	429a      	cmp	r2, r3
 800531a:	d348      	bcc.n	80053ae <xTaskIncrementTick+0x106>
 800531c:	4b35      	ldr	r3, [pc, #212]	; (80053f4 <xTaskIncrementTick+0x14c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <xTaskIncrementTick+0x88>
 8005326:	4b36      	ldr	r3, [pc, #216]	; (8005400 <xTaskIncrementTick+0x158>)
 8005328:	f04f 32ff 	mov.w	r2, #4294967295
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e03e      	b.n	80053ae <xTaskIncrementTick+0x106>
 8005330:	4b30      	ldr	r3, [pc, #192]	; (80053f4 <xTaskIncrementTick+0x14c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	607b      	str	r3, [r7, #4]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	429a      	cmp	r2, r3
 8005346:	d203      	bcs.n	8005350 <xTaskIncrementTick+0xa8>
 8005348:	4a2d      	ldr	r2, [pc, #180]	; (8005400 <xTaskIncrementTick+0x158>)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e02e      	b.n	80053ae <xTaskIncrementTick+0x106>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	3304      	adds	r3, #4
 8005354:	4618      	mov	r0, r3
 8005356:	f7fe ff5a 	bl	800420e <uxListRemove>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <xTaskIncrementTick+0xc4>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	3318      	adds	r3, #24
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe ff51 	bl	800420e <uxListRemove>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	2201      	movs	r2, #1
 8005372:	409a      	lsls	r2, r3
 8005374:	4b23      	ldr	r3, [pc, #140]	; (8005404 <xTaskIncrementTick+0x15c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4313      	orrs	r3, r2
 800537a:	4a22      	ldr	r2, [pc, #136]	; (8005404 <xTaskIncrementTick+0x15c>)
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4a1f      	ldr	r2, [pc, #124]	; (8005408 <xTaskIncrementTick+0x160>)
 800538c:	441a      	add	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	3304      	adds	r3, #4
 8005392:	4619      	mov	r1, r3
 8005394:	4610      	mov	r0, r2
 8005396:	f7fe fedd 	bl	8004154 <vListInsertEnd>
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539e:	4b1b      	ldr	r3, [pc, #108]	; (800540c <xTaskIncrementTick+0x164>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d3b9      	bcc.n	800531c <xTaskIncrementTick+0x74>
 80053a8:	2301      	movs	r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	e7b6      	b.n	800531c <xTaskIncrementTick+0x74>
 80053ae:	4b17      	ldr	r3, [pc, #92]	; (800540c <xTaskIncrementTick+0x164>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b4:	4914      	ldr	r1, [pc, #80]	; (8005408 <xTaskIncrementTick+0x160>)
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d901      	bls.n	80053ca <xTaskIncrementTick+0x122>
 80053c6:	2301      	movs	r3, #1
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	4b11      	ldr	r3, [pc, #68]	; (8005410 <xTaskIncrementTick+0x168>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <xTaskIncrementTick+0x13a>
 80053d2:	2301      	movs	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	e004      	b.n	80053e2 <xTaskIncrementTick+0x13a>
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <xTaskIncrementTick+0x16c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3301      	adds	r3, #1
 80053de:	4a0d      	ldr	r2, [pc, #52]	; (8005414 <xTaskIncrementTick+0x16c>)
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000564 	.word	0x20000564
 80053f0:	20000540 	.word	0x20000540
 80053f4:	200004f4 	.word	0x200004f4
 80053f8:	200004f8 	.word	0x200004f8
 80053fc:	20000554 	.word	0x20000554
 8005400:	2000055c 	.word	0x2000055c
 8005404:	20000544 	.word	0x20000544
 8005408:	20000440 	.word	0x20000440
 800540c:	2000043c 	.word	0x2000043c
 8005410:	20000550 	.word	0x20000550
 8005414:	2000054c 	.word	0x2000054c

08005418 <vTaskSwitchContext>:
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	4b27      	ldr	r3, [pc, #156]	; (80054bc <vTaskSwitchContext+0xa4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <vTaskSwitchContext+0x16>
 8005426:	4b26      	ldr	r3, [pc, #152]	; (80054c0 <vTaskSwitchContext+0xa8>)
 8005428:	2201      	movs	r2, #1
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	e03f      	b.n	80054ae <vTaskSwitchContext+0x96>
 800542e:	4b24      	ldr	r3, [pc, #144]	; (80054c0 <vTaskSwitchContext+0xa8>)
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <vTaskSwitchContext+0xac>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	fab3 f383 	clz	r3, r3
 8005440:	72fb      	strb	r3, [r7, #11]
 8005442:	7afb      	ldrb	r3, [r7, #11]
 8005444:	f1c3 031f 	rsb	r3, r3, #31
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	491f      	ldr	r1, [pc, #124]	; (80054c8 <vTaskSwitchContext+0xb0>)
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10a      	bne.n	8005474 <vTaskSwitchContext+0x5c>
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	bf00      	nop
 8005472:	e7fe      	b.n	8005472 <vTaskSwitchContext+0x5a>
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4a12      	ldr	r2, [pc, #72]	; (80054c8 <vTaskSwitchContext+0xb0>)
 8005480:	4413      	add	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	605a      	str	r2, [r3, #4]
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3308      	adds	r3, #8
 8005496:	429a      	cmp	r2, r3
 8005498:	d104      	bne.n	80054a4 <vTaskSwitchContext+0x8c>
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	4a08      	ldr	r2, [pc, #32]	; (80054cc <vTaskSwitchContext+0xb4>)
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	20000564 	.word	0x20000564
 80054c0:	20000550 	.word	0x20000550
 80054c4:	20000544 	.word	0x20000544
 80054c8:	20000440 	.word	0x20000440
 80054cc:	2000043c 	.word	0x2000043c

080054d0 <vTaskPlaceOnEventList>:
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <vTaskPlaceOnEventList+0x26>
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <vTaskPlaceOnEventList+0x24>
 80054f6:	4b07      	ldr	r3, [pc, #28]	; (8005514 <vTaskPlaceOnEventList+0x44>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3318      	adds	r3, #24
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fe fe4c 	bl	800419c <vListInsert>
 8005504:	2101      	movs	r1, #1
 8005506:	6838      	ldr	r0, [r7, #0]
 8005508:	f000 fb7e 	bl	8005c08 <prvAddCurrentTaskToDelayedList>
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	2000043c 	.word	0x2000043c

08005518 <xTaskRemoveFromEventList>:
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <xTaskRemoveFromEventList+0x2c>
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <xTaskRemoveFromEventList+0x2a>
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	3318      	adds	r3, #24
 8005548:	4618      	mov	r0, r3
 800554a:	f7fe fe60 	bl	800420e <uxListRemove>
 800554e:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <xTaskRemoveFromEventList+0xac>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d11c      	bne.n	8005590 <xTaskRemoveFromEventList+0x78>
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	3304      	adds	r3, #4
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe fe57 	bl	800420e <uxListRemove>
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	2201      	movs	r2, #1
 8005566:	409a      	lsls	r2, r3
 8005568:	4b17      	ldr	r3, [pc, #92]	; (80055c8 <xTaskRemoveFromEventList+0xb0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4313      	orrs	r3, r2
 800556e:	4a16      	ldr	r2, [pc, #88]	; (80055c8 <xTaskRemoveFromEventList+0xb0>)
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4a13      	ldr	r2, [pc, #76]	; (80055cc <xTaskRemoveFromEventList+0xb4>)
 8005580:	441a      	add	r2, r3
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	3304      	adds	r3, #4
 8005586:	4619      	mov	r1, r3
 8005588:	4610      	mov	r0, r2
 800558a:	f7fe fde3 	bl	8004154 <vListInsertEnd>
 800558e:	e005      	b.n	800559c <xTaskRemoveFromEventList+0x84>
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	3318      	adds	r3, #24
 8005594:	4619      	mov	r1, r3
 8005596:	480e      	ldr	r0, [pc, #56]	; (80055d0 <xTaskRemoveFromEventList+0xb8>)
 8005598:	f7fe fddc 	bl	8004154 <vListInsertEnd>
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a0:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <xTaskRemoveFromEventList+0xbc>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d905      	bls.n	80055b6 <xTaskRemoveFromEventList+0x9e>
 80055aa:	2301      	movs	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <xTaskRemoveFromEventList+0xc0>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	e001      	b.n	80055ba <xTaskRemoveFromEventList+0xa2>
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000564 	.word	0x20000564
 80055c8:	20000544 	.word	0x20000544
 80055cc:	20000440 	.word	0x20000440
 80055d0:	200004fc 	.word	0x200004fc
 80055d4:	2000043c 	.word	0x2000043c
 80055d8:	20000550 	.word	0x20000550

080055dc <vTaskInternalSetTimeOutState>:
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <vTaskInternalSetTimeOutState+0x24>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <vTaskInternalSetTimeOutState+0x28>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	605a      	str	r2, [r3, #4]
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	20000554 	.word	0x20000554
 8005604:	20000540 	.word	0x20000540

08005608 <xTaskCheckForTimeOut>:
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <xTaskCheckForTimeOut+0x26>
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <xTaskCheckForTimeOut+0x24>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xTaskCheckForTimeOut+0x42>
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xTaskCheckForTimeOut+0x40>
 800564a:	f000 fc73 	bl	8005f34 <vPortEnterCritical>
 800564e:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <xTaskCheckForTimeOut+0xbc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d102      	bne.n	800566e <xTaskCheckForTimeOut+0x66>
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	e023      	b.n	80056b6 <xTaskCheckForTimeOut+0xae>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4b15      	ldr	r3, [pc, #84]	; (80056c8 <xTaskCheckForTimeOut+0xc0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d007      	beq.n	800568a <xTaskCheckForTimeOut+0x82>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	429a      	cmp	r2, r3
 8005682:	d302      	bcc.n	800568a <xTaskCheckForTimeOut+0x82>
 8005684:	2301      	movs	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	e015      	b.n	80056b6 <xTaskCheckForTimeOut+0xae>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	429a      	cmp	r2, r3
 8005692:	d20b      	bcs.n	80056ac <xTaskCheckForTimeOut+0xa4>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	1ad2      	subs	r2, r2, r3
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ff9b 	bl	80055dc <vTaskInternalSetTimeOutState>
 80056a6:	2300      	movs	r3, #0
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	e004      	b.n	80056b6 <xTaskCheckForTimeOut+0xae>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	2301      	movs	r3, #1
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	f000 fc6d 	bl	8005f94 <vPortExitCritical>
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	4618      	mov	r0, r3
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000540 	.word	0x20000540
 80056c8:	20000554 	.word	0x20000554

080056cc <vTaskMissedYield>:
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <vTaskMissedYield+0x14>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	20000550 	.word	0x20000550

080056e4 <prvIdleTask>:
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	f000 f852 	bl	8005794 <prvCheckTasksWaitingTermination>
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <prvIdleTask+0x28>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d9f9      	bls.n	80056ec <prvIdleTask+0x8>
 80056f8:	4b05      	ldr	r3, [pc, #20]	; (8005710 <prvIdleTask+0x2c>)
 80056fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	e7f0      	b.n	80056ec <prvIdleTask+0x8>
 800570a:	bf00      	nop
 800570c:	20000440 	.word	0x20000440
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <prvInitialiseTaskLists>:
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
 800571e:	e00c      	b.n	800573a <prvInitialiseTaskLists+0x26>
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4a12      	ldr	r2, [pc, #72]	; (8005774 <prvInitialiseTaskLists+0x60>)
 800572c:	4413      	add	r3, r2
 800572e:	4618      	mov	r0, r3
 8005730:	f7fe fce3 	bl	80040fa <vListInitialise>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3301      	adds	r3, #1
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b06      	cmp	r3, #6
 800573e:	d9ef      	bls.n	8005720 <prvInitialiseTaskLists+0xc>
 8005740:	480d      	ldr	r0, [pc, #52]	; (8005778 <prvInitialiseTaskLists+0x64>)
 8005742:	f7fe fcda 	bl	80040fa <vListInitialise>
 8005746:	480d      	ldr	r0, [pc, #52]	; (800577c <prvInitialiseTaskLists+0x68>)
 8005748:	f7fe fcd7 	bl	80040fa <vListInitialise>
 800574c:	480c      	ldr	r0, [pc, #48]	; (8005780 <prvInitialiseTaskLists+0x6c>)
 800574e:	f7fe fcd4 	bl	80040fa <vListInitialise>
 8005752:	480c      	ldr	r0, [pc, #48]	; (8005784 <prvInitialiseTaskLists+0x70>)
 8005754:	f7fe fcd1 	bl	80040fa <vListInitialise>
 8005758:	480b      	ldr	r0, [pc, #44]	; (8005788 <prvInitialiseTaskLists+0x74>)
 800575a:	f7fe fcce 	bl	80040fa <vListInitialise>
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <prvInitialiseTaskLists+0x78>)
 8005760:	4a05      	ldr	r2, [pc, #20]	; (8005778 <prvInitialiseTaskLists+0x64>)
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <prvInitialiseTaskLists+0x7c>)
 8005766:	4a05      	ldr	r2, [pc, #20]	; (800577c <prvInitialiseTaskLists+0x68>)
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000440 	.word	0x20000440
 8005778:	200004cc 	.word	0x200004cc
 800577c:	200004e0 	.word	0x200004e0
 8005780:	200004fc 	.word	0x200004fc
 8005784:	20000510 	.word	0x20000510
 8005788:	20000528 	.word	0x20000528
 800578c:	200004f4 	.word	0x200004f4
 8005790:	200004f8 	.word	0x200004f8

08005794 <prvCheckTasksWaitingTermination>:
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	e019      	b.n	80057d0 <prvCheckTasksWaitingTermination+0x3c>
 800579c:	f000 fbca 	bl	8005f34 <vPortEnterCritical>
 80057a0:	4b10      	ldr	r3, [pc, #64]	; (80057e4 <prvCheckTasksWaitingTermination+0x50>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	607b      	str	r3, [r7, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fe fd2e 	bl	800420e <uxListRemove>
 80057b2:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <prvCheckTasksWaitingTermination+0x54>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	4a0b      	ldr	r2, [pc, #44]	; (80057e8 <prvCheckTasksWaitingTermination+0x54>)
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <prvCheckTasksWaitingTermination+0x58>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <prvCheckTasksWaitingTermination+0x58>)
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	f000 fbe5 	bl	8005f94 <vPortExitCritical>
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f810 	bl	80057f0 <prvDeleteTCB>
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <prvCheckTasksWaitingTermination+0x58>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e1      	bne.n	800579c <prvCheckTasksWaitingTermination+0x8>
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000510 	.word	0x20000510
 80057e8:	2000053c 	.word	0x2000053c
 80057ec:	20000524 	.word	0x20000524

080057f0 <prvDeleteTCB>:
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d108      	bne.n	8005814 <prvDeleteTCB+0x24>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fd42 	bl	8006290 <vPortFree>
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fd3f 	bl	8006290 <vPortFree>
 8005812:	e018      	b.n	8005846 <prvDeleteTCB+0x56>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800581a:	2b01      	cmp	r3, #1
 800581c:	d103      	bne.n	8005826 <prvDeleteTCB+0x36>
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fd36 	bl	8006290 <vPortFree>
 8005824:	e00f      	b.n	8005846 <prvDeleteTCB+0x56>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800582c:	2b02      	cmp	r3, #2
 800582e:	d00a      	beq.n	8005846 <prvDeleteTCB+0x56>
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <prvDeleteTCB+0x54>
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <prvResetNextTaskUnblockTime>:
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <prvResetNextTaskUnblockTime+0x38>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <prvResetNextTaskUnblockTime+0x1a>
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <prvResetNextTaskUnblockTime+0x3c>)
 8005862:	f04f 32ff 	mov.w	r2, #4294967295
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	e008      	b.n	800587c <prvResetNextTaskUnblockTime+0x2c>
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <prvResetNextTaskUnblockTime+0x38>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <prvResetNextTaskUnblockTime+0x3c>)
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	200004f4 	.word	0x200004f4
 800588c:	2000055c 	.word	0x2000055c

08005890 <xTaskGetSchedulerState>:
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <xTaskGetSchedulerState+0x34>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <xTaskGetSchedulerState+0x14>
 800589e:	2301      	movs	r3, #1
 80058a0:	607b      	str	r3, [r7, #4]
 80058a2:	e008      	b.n	80058b6 <xTaskGetSchedulerState+0x26>
 80058a4:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <xTaskGetSchedulerState+0x38>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d102      	bne.n	80058b2 <xTaskGetSchedulerState+0x22>
 80058ac:	2302      	movs	r3, #2
 80058ae:	607b      	str	r3, [r7, #4]
 80058b0:	e001      	b.n	80058b6 <xTaskGetSchedulerState+0x26>
 80058b2:	2300      	movs	r3, #0
 80058b4:	607b      	str	r3, [r7, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	20000548 	.word	0x20000548
 80058c8:	20000564 	.word	0x20000564

080058cc <xTaskPriorityInherit>:
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60bb      	str	r3, [r7, #8]
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d05e      	beq.n	80059a0 <xTaskPriorityInherit+0xd4>
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e6:	4b31      	ldr	r3, [pc, #196]	; (80059ac <xTaskPriorityInherit+0xe0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d24e      	bcs.n	800598e <xTaskPriorityInherit+0xc2>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	db06      	blt.n	8005906 <xTaskPriorityInherit+0x3a>
 80058f8:	4b2c      	ldr	r3, [pc, #176]	; (80059ac <xTaskPriorityInherit+0xe0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	f1c3 0207 	rsb	r2, r3, #7
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	619a      	str	r2, [r3, #24]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6959      	ldr	r1, [r3, #20]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4a26      	ldr	r2, [pc, #152]	; (80059b0 <xTaskPriorityInherit+0xe4>)
 8005918:	4413      	add	r3, r2
 800591a:	4299      	cmp	r1, r3
 800591c:	d12f      	bne.n	800597e <xTaskPriorityInherit+0xb2>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	3304      	adds	r3, #4
 8005922:	4618      	mov	r0, r3
 8005924:	f7fe fc73 	bl	800420e <uxListRemove>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <xTaskPriorityInherit+0x78>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	2201      	movs	r2, #1
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	43da      	mvns	r2, r3
 800593a:	4b1e      	ldr	r3, [pc, #120]	; (80059b4 <xTaskPriorityInherit+0xe8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4013      	ands	r3, r2
 8005940:	4a1c      	ldr	r2, [pc, #112]	; (80059b4 <xTaskPriorityInherit+0xe8>)
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	4b19      	ldr	r3, [pc, #100]	; (80059ac <xTaskPriorityInherit+0xe0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	62da      	str	r2, [r3, #44]	; 0x2c
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	2201      	movs	r2, #1
 8005954:	409a      	lsls	r2, r3
 8005956:	4b17      	ldr	r3, [pc, #92]	; (80059b4 <xTaskPriorityInherit+0xe8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4313      	orrs	r3, r2
 800595c:	4a15      	ldr	r2, [pc, #84]	; (80059b4 <xTaskPriorityInherit+0xe8>)
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a10      	ldr	r2, [pc, #64]	; (80059b0 <xTaskPriorityInherit+0xe4>)
 800596e:	441a      	add	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f7fe fbec 	bl	8004154 <vListInsertEnd>
 800597c:	e004      	b.n	8005988 <xTaskPriorityInherit+0xbc>
 800597e:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <xTaskPriorityInherit+0xe0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	62da      	str	r2, [r3, #44]	; 0x2c
 8005988:	2301      	movs	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	e008      	b.n	80059a0 <xTaskPriorityInherit+0xd4>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005992:	4b06      	ldr	r3, [pc, #24]	; (80059ac <xTaskPriorityInherit+0xe0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	429a      	cmp	r2, r3
 800599a:	d201      	bcs.n	80059a0 <xTaskPriorityInherit+0xd4>
 800599c:	2301      	movs	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	2000043c 	.word	0x2000043c
 80059b0:	20000440 	.word	0x20000440
 80059b4:	20000544 	.word	0x20000544

080059b8 <xTaskPriorityDisinherit>:
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d06e      	beq.n	8005aac <xTaskPriorityDisinherit+0xf4>
 80059ce:	4b3a      	ldr	r3, [pc, #232]	; (8005ab8 <xTaskPriorityDisinherit+0x100>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d00a      	beq.n	80059ee <xTaskPriorityDisinherit+0x36>
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xTaskPriorityDisinherit+0x34>
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <xTaskPriorityDisinherit+0x54>
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	bf00      	nop
 8005a0a:	e7fe      	b.n	8005a0a <xTaskPriorityDisinherit+0x52>
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a10:	1e5a      	subs	r2, r3, #1
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	649a      	str	r2, [r3, #72]	; 0x48
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d044      	beq.n	8005aac <xTaskPriorityDisinherit+0xf4>
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d140      	bne.n	8005aac <xTaskPriorityDisinherit+0xf4>
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fbed 	bl	800420e <uxListRemove>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d115      	bne.n	8005a66 <xTaskPriorityDisinherit+0xae>
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	491f      	ldr	r1, [pc, #124]	; (8005abc <xTaskPriorityDisinherit+0x104>)
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <xTaskPriorityDisinherit+0xae>
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	2201      	movs	r2, #1
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43da      	mvns	r2, r3
 8005a5c:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <xTaskPriorityDisinherit+0x108>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4013      	ands	r3, r2
 8005a62:	4a17      	ldr	r2, [pc, #92]	; (8005ac0 <xTaskPriorityDisinherit+0x108>)
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	f1c3 0207 	rsb	r2, r3, #7
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	619a      	str	r2, [r3, #24]
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	2201      	movs	r2, #1
 8005a80:	409a      	lsls	r2, r3
 8005a82:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <xTaskPriorityDisinherit+0x108>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	4a0d      	ldr	r2, [pc, #52]	; (8005ac0 <xTaskPriorityDisinherit+0x108>)
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4a08      	ldr	r2, [pc, #32]	; (8005abc <xTaskPriorityDisinherit+0x104>)
 8005a9a:	441a      	add	r2, r3
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f7fe fb56 	bl	8004154 <vListInsertEnd>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	2000043c 	.word	0x2000043c
 8005abc:	20000440 	.word	0x20000440
 8005ac0:	20000544 	.word	0x20000544

08005ac4 <vTaskPriorityDisinheritAfterTimeout>:
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d077      	beq.n	8005bcc <vTaskPriorityDisinheritAfterTimeout+0x108>
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d902      	bls.n	8005b0a <vTaskPriorityDisinheritAfterTimeout+0x46>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	e002      	b.n	8005b10 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0e:	61fb      	str	r3, [r7, #28]
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d058      	beq.n	8005bcc <vTaskPriorityDisinheritAfterTimeout+0x108>
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d153      	bne.n	8005bcc <vTaskPriorityDisinheritAfterTimeout+0x108>
 8005b24:	4b2b      	ldr	r3, [pc, #172]	; (8005bd4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d10a      	bne.n	8005b44 <vTaskPriorityDisinheritAfterTimeout+0x80>
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	60bb      	str	r3, [r7, #8]
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	db04      	blt.n	8005b62 <vTaskPriorityDisinheritAfterTimeout+0x9e>
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f1c3 0207 	rsb	r2, r3, #7
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	619a      	str	r2, [r3, #24]
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	6959      	ldr	r1, [r3, #20]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005b72:	4413      	add	r3, r2
 8005b74:	4299      	cmp	r1, r3
 8005b76:	d129      	bne.n	8005bcc <vTaskPriorityDisinheritAfterTimeout+0x108>
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fb46 	bl	800420e <uxListRemove>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <vTaskPriorityDisinheritAfterTimeout+0xda>
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43da      	mvns	r2, r3
 8005b94:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	4a10      	ldr	r2, [pc, #64]	; (8005bdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	409a      	lsls	r2, r3
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	4a0b      	ldr	r2, [pc, #44]	; (8005bdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4a06      	ldr	r2, [pc, #24]	; (8005bd8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005bbe:	441a      	add	r2, r3
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	f7fe fac4 	bl	8004154 <vListInsertEnd>
 8005bcc:	bf00      	nop
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	2000043c 	.word	0x2000043c
 8005bd8:	20000440 	.word	0x20000440
 8005bdc:	20000544 	.word	0x20000544

08005be0 <pvTaskIncrementMutexHeldCount>:
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <pvTaskIncrementMutexHeldCount+0x16>
 8005bec:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bf2:	3201      	adds	r2, #1
 8005bf4:	649a      	str	r2, [r3, #72]	; 0x48
 8005bf6:	4b03      	ldr	r3, [pc, #12]	; (8005c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	2000043c 	.word	0x2000043c

08005c08 <prvAddCurrentTaskToDelayedList>:
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
 8005c12:	4b29      	ldr	r3, [pc, #164]	; (8005cb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	4b28      	ldr	r3, [pc, #160]	; (8005cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe faf5 	bl	800420e <uxListRemove>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c2a:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	2201      	movs	r2, #1
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	43da      	mvns	r2, r3
 8005c38:	4b21      	ldr	r3, [pc, #132]	; (8005cc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	4a20      	ldr	r2, [pc, #128]	; (8005cc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d10a      	bne.n	8005c60 <prvAddCurrentTaskToDelayedList+0x58>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d007      	beq.n	8005c60 <prvAddCurrentTaskToDelayedList+0x58>
 8005c50:	4b1a      	ldr	r3, [pc, #104]	; (8005cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3304      	adds	r3, #4
 8005c56:	4619      	mov	r1, r3
 8005c58:	481a      	ldr	r0, [pc, #104]	; (8005cc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c5a:	f7fe fa7b 	bl	8004154 <vListInsertEnd>
 8005c5e:	e026      	b.n	8005cae <prvAddCurrentTaskToDelayedList+0xa6>
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4413      	add	r3, r2
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	605a      	str	r2, [r3, #4]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d209      	bcs.n	8005c8c <prvAddCurrentTaskToDelayedList+0x84>
 8005c78:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	4b0f      	ldr	r3, [pc, #60]	; (8005cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3304      	adds	r3, #4
 8005c82:	4619      	mov	r1, r3
 8005c84:	4610      	mov	r0, r2
 8005c86:	f7fe fa89 	bl	800419c <vListInsert>
 8005c8a:	e010      	b.n	8005cae <prvAddCurrentTaskToDelayedList+0xa6>
 8005c8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f7fe fa7f 	bl	800419c <vListInsert>
 8005c9e:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d202      	bcs.n	8005cae <prvAddCurrentTaskToDelayedList+0xa6>
 8005ca8:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	bf00      	nop
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000540 	.word	0x20000540
 8005cbc:	2000043c 	.word	0x2000043c
 8005cc0:	20000544 	.word	0x20000544
 8005cc4:	20000528 	.word	0x20000528
 8005cc8:	200004f8 	.word	0x200004f8
 8005ccc:	200004f4 	.word	0x200004f4
 8005cd0:	2000055c 	.word	0x2000055c

08005cd4 <pxPortInitialiseStack>:
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3b04      	subs	r3, #4
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3b04      	subs	r3, #4
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f023 0201 	bic.w	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3b04      	subs	r3, #4
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	4a0c      	ldr	r2, [pc, #48]	; (8005d38 <pxPortInitialiseStack+0x64>)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3b14      	subs	r3, #20
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3b04      	subs	r3, #4
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f06f 0202 	mvn.w	r2, #2
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3b20      	subs	r3, #32
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	08005d3d 	.word	0x08005d3d

08005d3c <prvTaskExitError>:
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	2300      	movs	r3, #0
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	4b12      	ldr	r3, [pc, #72]	; (8005d90 <prvTaskExitError+0x54>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4e:	d00a      	beq.n	8005d66 <prvTaskExitError+0x2a>
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	bf00      	nop
 8005d64:	e7fe      	b.n	8005d64 <prvTaskExitError+0x28>
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	bf00      	nop
 8005d7a:	bf00      	nop
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0fc      	beq.n	8005d7c <prvTaskExitError+0x40>
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	20000018 	.word	0x20000018
	...

08005da0 <SVC_Handler>:
 8005da0:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <pxCurrentTCBConst2>)
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	6808      	ldr	r0, [r1, #0]
 8005da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005daa:	f380 8809 	msr	PSP, r0
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f04f 0000 	mov.w	r0, #0
 8005db6:	f380 8811 	msr	BASEPRI, r0
 8005dba:	4770      	bx	lr
 8005dbc:	f3af 8000 	nop.w

08005dc0 <pxCurrentTCBConst2>:
 8005dc0:	2000043c 	.word	0x2000043c
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop

08005dc8 <prvPortStartFirstTask>:
 8005dc8:	4808      	ldr	r0, [pc, #32]	; (8005dec <prvPortStartFirstTask+0x24>)
 8005dca:	6800      	ldr	r0, [r0, #0]
 8005dcc:	6800      	ldr	r0, [r0, #0]
 8005dce:	f380 8808 	msr	MSP, r0
 8005dd2:	f04f 0000 	mov.w	r0, #0
 8005dd6:	f380 8814 	msr	CONTROL, r0
 8005dda:	b662      	cpsie	i
 8005ddc:	b661      	cpsie	f
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	df00      	svc	0
 8005de8:	bf00      	nop
 8005dea:	bf00      	nop
 8005dec:	e000ed08 	.word	0xe000ed08

08005df0 <xPortStartScheduler>:
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4b46      	ldr	r3, [pc, #280]	; (8005f10 <xPortStartScheduler+0x120>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a46      	ldr	r2, [pc, #280]	; (8005f14 <xPortStartScheduler+0x124>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d10a      	bne.n	8005e16 <xPortStartScheduler+0x26>
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xPortStartScheduler+0x24>
 8005e16:	4b3e      	ldr	r3, [pc, #248]	; (8005f10 <xPortStartScheduler+0x120>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a3f      	ldr	r2, [pc, #252]	; (8005f18 <xPortStartScheduler+0x128>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d10a      	bne.n	8005e36 <xPortStartScheduler+0x46>
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xPortStartScheduler+0x44>
 8005e36:	4b39      	ldr	r3, [pc, #228]	; (8005f1c <xPortStartScheduler+0x12c>)
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	607b      	str	r3, [r7, #4]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	22ff      	movs	r2, #255	; 0xff
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	70fb      	strb	r3, [r7, #3]
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	4b31      	ldr	r3, [pc, #196]	; (8005f20 <xPortStartScheduler+0x130>)
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	4b31      	ldr	r3, [pc, #196]	; (8005f24 <xPortStartScheduler+0x134>)
 8005e60:	2207      	movs	r2, #7
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	e009      	b.n	8005e7a <xPortStartScheduler+0x8a>
 8005e66:	4b2f      	ldr	r3, [pc, #188]	; (8005f24 <xPortStartScheduler+0x134>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	4a2d      	ldr	r2, [pc, #180]	; (8005f24 <xPortStartScheduler+0x134>)
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	70fb      	strb	r3, [r7, #3]
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e82:	2b80      	cmp	r3, #128	; 0x80
 8005e84:	d0ef      	beq.n	8005e66 <xPortStartScheduler+0x76>
 8005e86:	4b27      	ldr	r3, [pc, #156]	; (8005f24 <xPortStartScheduler+0x134>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f1c3 0307 	rsb	r3, r3, #7
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d00a      	beq.n	8005ea8 <xPortStartScheduler+0xb8>
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	60bb      	str	r3, [r7, #8]
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <xPortStartScheduler+0xb6>
 8005ea8:	4b1e      	ldr	r3, [pc, #120]	; (8005f24 <xPortStartScheduler+0x134>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	4a1d      	ldr	r2, [pc, #116]	; (8005f24 <xPortStartScheduler+0x134>)
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b1c      	ldr	r3, [pc, #112]	; (8005f24 <xPortStartScheduler+0x134>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eba:	4a1a      	ldr	r2, [pc, #104]	; (8005f24 <xPortStartScheduler+0x134>)
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	4b18      	ldr	r3, [pc, #96]	; (8005f28 <xPortStartScheduler+0x138>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <xPortStartScheduler+0x138>)
 8005ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <xPortStartScheduler+0x138>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a14      	ldr	r2, [pc, #80]	; (8005f28 <xPortStartScheduler+0x138>)
 8005ed8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	f000 f8dd 	bl	800609c <vPortSetupTimerInterrupt>
 8005ee2:	4b12      	ldr	r3, [pc, #72]	; (8005f2c <xPortStartScheduler+0x13c>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f000 f8fc 	bl	80060e4 <vPortEnableVFP>
 8005eec:	4b10      	ldr	r3, [pc, #64]	; (8005f30 <xPortStartScheduler+0x140>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0f      	ldr	r2, [pc, #60]	; (8005f30 <xPortStartScheduler+0x140>)
 8005ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	f7ff ff66 	bl	8005dc8 <prvPortStartFirstTask>
 8005efc:	f7ff fa8c 	bl	8005418 <vTaskSwitchContext>
 8005f00:	f7ff ff1c 	bl	8005d3c <prvTaskExitError>
 8005f04:	2300      	movs	r3, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	e000ed00 	.word	0xe000ed00
 8005f14:	410fc271 	.word	0x410fc271
 8005f18:	410fc270 	.word	0x410fc270
 8005f1c:	e000e400 	.word	0xe000e400
 8005f20:	20000568 	.word	0x20000568
 8005f24:	2000056c 	.word	0x2000056c
 8005f28:	e000ed20 	.word	0xe000ed20
 8005f2c:	20000018 	.word	0x20000018
 8005f30:	e000ef34 	.word	0xe000ef34

08005f34 <vPortEnterCritical>:
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	607b      	str	r3, [r7, #4]
 8005f4c:	bf00      	nop
 8005f4e:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <vPortEnterCritical+0x58>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	4a0d      	ldr	r2, [pc, #52]	; (8005f8c <vPortEnterCritical+0x58>)
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <vPortEnterCritical+0x58>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d10f      	bne.n	8005f80 <vPortEnterCritical+0x4c>
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <vPortEnterCritical+0x5c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <vPortEnterCritical+0x4c>
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	bf00      	nop
 8005f7e:	e7fe      	b.n	8005f7e <vPortEnterCritical+0x4a>
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	20000018 	.word	0x20000018
 8005f90:	e000ed04 	.word	0xe000ed04

08005f94 <vPortExitCritical>:
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <vPortExitCritical+0x50>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <vPortExitCritical+0x24>
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	607b      	str	r3, [r7, #4]
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <vPortExitCritical+0x22>
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <vPortExitCritical+0x50>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	4a09      	ldr	r2, [pc, #36]	; (8005fe4 <vPortExitCritical+0x50>)
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <vPortExitCritical+0x50>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d105      	bne.n	8005fd6 <vPortExitCritical+0x42>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	20000018 	.word	0x20000018
	...

08005ff0 <PendSV_Handler>:
 8005ff0:	f3ef 8009 	mrs	r0, PSP
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	4b15      	ldr	r3, [pc, #84]	; (8006050 <pxCurrentTCBConst>)
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	f01e 0f10 	tst.w	lr, #16
 8006000:	bf08      	it	eq
 8006002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600a:	6010      	str	r0, [r2, #0]
 800600c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006014:	f380 8811 	msr	BASEPRI, r0
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f7ff f9fa 	bl	8005418 <vTaskSwitchContext>
 8006024:	f04f 0000 	mov.w	r0, #0
 8006028:	f380 8811 	msr	BASEPRI, r0
 800602c:	bc09      	pop	{r0, r3}
 800602e:	6819      	ldr	r1, [r3, #0]
 8006030:	6808      	ldr	r0, [r1, #0]
 8006032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006036:	f01e 0f10 	tst.w	lr, #16
 800603a:	bf08      	it	eq
 800603c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006040:	f380 8809 	msr	PSP, r0
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	f3af 8000 	nop.w

08006050 <pxCurrentTCBConst>:
 8006050:	2000043c 	.word	0x2000043c
 8006054:	bf00      	nop
 8006056:	bf00      	nop

08006058 <SysTick_Handler>:
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	607b      	str	r3, [r7, #4]
 8006070:	bf00      	nop
 8006072:	f7ff f919 	bl	80052a8 <xTaskIncrementTick>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <SysTick_Handler+0x2c>
 800607c:	4b06      	ldr	r3, [pc, #24]	; (8006098 <SysTick_Handler+0x40>)
 800607e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	2300      	movs	r3, #0
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	e000ed04 	.word	0xe000ed04

0800609c <vPortSetupTimerInterrupt>:
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
 80060a0:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <vPortSetupTimerInterrupt+0x34>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <vPortSetupTimerInterrupt+0x38>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <vPortSetupTimerInterrupt+0x3c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <vPortSetupTimerInterrupt+0x40>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	099b      	lsrs	r3, r3, #6
 80060b8:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <vPortSetupTimerInterrupt+0x44>)
 80060ba:	3b01      	subs	r3, #1
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	4b04      	ldr	r3, [pc, #16]	; (80060d0 <vPortSetupTimerInterrupt+0x34>)
 80060c0:	2207      	movs	r2, #7
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	bf00      	nop
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	e000e010 	.word	0xe000e010
 80060d4:	e000e018 	.word	0xe000e018
 80060d8:	2000000c 	.word	0x2000000c
 80060dc:	10624dd3 	.word	0x10624dd3
 80060e0:	e000e014 	.word	0xe000e014

080060e4 <vPortEnableVFP>:
 80060e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060f4 <vPortEnableVFP+0x10>
 80060e8:	6801      	ldr	r1, [r0, #0]
 80060ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060ee:	6001      	str	r1, [r0, #0]
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	e000ed88 	.word	0xe000ed88

080060f8 <pvPortMalloc>:
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08a      	sub	sp, #40	; 0x28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	2300      	movs	r3, #0
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	f7ff f816 	bl	8005134 <vTaskSuspendAll>
 8006108:	4b5b      	ldr	r3, [pc, #364]	; (8006278 <pvPortMalloc+0x180>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <pvPortMalloc+0x1c>
 8006110:	f000 f920 	bl	8006354 <prvHeapInit>
 8006114:	4b59      	ldr	r3, [pc, #356]	; (800627c <pvPortMalloc+0x184>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4013      	ands	r3, r2
 800611c:	2b00      	cmp	r3, #0
 800611e:	f040 8093 	bne.w	8006248 <pvPortMalloc+0x150>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01d      	beq.n	8006164 <pvPortMalloc+0x6c>
 8006128:	2208      	movs	r2, #8
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	607b      	str	r3, [r7, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	2b00      	cmp	r3, #0
 8006138:	d014      	beq.n	8006164 <pvPortMalloc+0x6c>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f023 0307 	bic.w	r3, r3, #7
 8006140:	3308      	adds	r3, #8
 8006142:	607b      	str	r3, [r7, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <pvPortMalloc+0x6c>
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <pvPortMalloc+0x6a>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d06e      	beq.n	8006248 <pvPortMalloc+0x150>
 800616a:	4b45      	ldr	r3, [pc, #276]	; (8006280 <pvPortMalloc+0x188>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	d869      	bhi.n	8006248 <pvPortMalloc+0x150>
 8006174:	4b43      	ldr	r3, [pc, #268]	; (8006284 <pvPortMalloc+0x18c>)
 8006176:	623b      	str	r3, [r7, #32]
 8006178:	4b42      	ldr	r3, [pc, #264]	; (8006284 <pvPortMalloc+0x18c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
 800617e:	e004      	b.n	800618a <pvPortMalloc+0x92>
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	623b      	str	r3, [r7, #32]
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d903      	bls.n	800619c <pvPortMalloc+0xa4>
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1f1      	bne.n	8006180 <pvPortMalloc+0x88>
 800619c:	4b36      	ldr	r3, [pc, #216]	; (8006278 <pvPortMalloc+0x180>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d050      	beq.n	8006248 <pvPortMalloc+0x150>
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2208      	movs	r2, #8
 80061ac:	4413      	add	r3, r2
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	2308      	movs	r3, #8
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d91f      	bls.n	8006208 <pvPortMalloc+0x110>
 80061c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4413      	add	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f003 0307 	and.w	r3, r3, #7
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <pvPortMalloc+0xf8>
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	613b      	str	r3, [r7, #16]
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <pvPortMalloc+0xf6>
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	1ad2      	subs	r2, r2, r3
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	605a      	str	r2, [r3, #4]
 8006202:	69b8      	ldr	r0, [r7, #24]
 8006204:	f000 f908 	bl	8006418 <prvInsertBlockIntoFreeList>
 8006208:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <pvPortMalloc+0x188>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	4a1b      	ldr	r2, [pc, #108]	; (8006280 <pvPortMalloc+0x188>)
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <pvPortMalloc+0x188>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <pvPortMalloc+0x190>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d203      	bcs.n	800622a <pvPortMalloc+0x132>
 8006222:	4b17      	ldr	r3, [pc, #92]	; (8006280 <pvPortMalloc+0x188>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a18      	ldr	r2, [pc, #96]	; (8006288 <pvPortMalloc+0x190>)
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	4b13      	ldr	r3, [pc, #76]	; (800627c <pvPortMalloc+0x184>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	431a      	orrs	r2, r3
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	605a      	str	r2, [r3, #4]
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	4b13      	ldr	r3, [pc, #76]	; (800628c <pvPortMalloc+0x194>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3301      	adds	r3, #1
 8006244:	4a11      	ldr	r2, [pc, #68]	; (800628c <pvPortMalloc+0x194>)
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	f7fe ff82 	bl	8005150 <xTaskResumeAll>
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <pvPortMalloc+0x174>
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	bf00      	nop
 800626a:	e7fe      	b.n	800626a <pvPortMalloc+0x172>
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	4618      	mov	r0, r3
 8006270:	3728      	adds	r7, #40	; 0x28
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20004178 	.word	0x20004178
 800627c:	2000418c 	.word	0x2000418c
 8006280:	2000417c 	.word	0x2000417c
 8006284:	20004170 	.word	0x20004170
 8006288:	20004180 	.word	0x20004180
 800628c:	20004184 	.word	0x20004184

08006290 <vPortFree>:
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d04d      	beq.n	800633e <vPortFree+0xae>
 80062a2:	2308      	movs	r3, #8
 80062a4:	425b      	negs	r3, r3
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	4413      	add	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	4b24      	ldr	r3, [pc, #144]	; (8006348 <vPortFree+0xb8>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4013      	ands	r3, r2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <vPortFree+0x44>
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <vPortFree+0x42>
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <vPortFree+0x62>
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	bf00      	nop
 80062f0:	e7fe      	b.n	80062f0 <vPortFree+0x60>
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	4b14      	ldr	r3, [pc, #80]	; (8006348 <vPortFree+0xb8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01e      	beq.n	800633e <vPortFree+0xae>
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d11a      	bne.n	800633e <vPortFree+0xae>
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	4b0e      	ldr	r3, [pc, #56]	; (8006348 <vPortFree+0xb8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	43db      	mvns	r3, r3
 8006312:	401a      	ands	r2, r3
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	605a      	str	r2, [r3, #4]
 8006318:	f7fe ff0c 	bl	8005134 <vTaskSuspendAll>
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	4b0a      	ldr	r3, [pc, #40]	; (800634c <vPortFree+0xbc>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4413      	add	r3, r2
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <vPortFree+0xbc>)
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	6938      	ldr	r0, [r7, #16]
 800632c:	f000 f874 	bl	8006418 <prvInsertBlockIntoFreeList>
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <vPortFree+0xc0>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3301      	adds	r3, #1
 8006336:	4a06      	ldr	r2, [pc, #24]	; (8006350 <vPortFree+0xc0>)
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	f7fe ff09 	bl	8005150 <xTaskResumeAll>
 800633e:	bf00      	nop
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	2000418c 	.word	0x2000418c
 800634c:	2000417c 	.word	0x2000417c
 8006350:	20004188 	.word	0x20004188

08006354 <prvHeapInit>:
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800635e:	60bb      	str	r3, [r7, #8]
 8006360:	4b27      	ldr	r3, [pc, #156]	; (8006400 <prvHeapInit+0xac>)
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00c      	beq.n	8006388 <prvHeapInit+0x34>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3307      	adds	r3, #7
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0307 	bic.w	r3, r3, #7
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	4a1f      	ldr	r2, [pc, #124]	; (8006400 <prvHeapInit+0xac>)
 8006384:	4413      	add	r3, r2
 8006386:	60bb      	str	r3, [r7, #8]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	607b      	str	r3, [r7, #4]
 800638c:	4a1d      	ldr	r2, [pc, #116]	; (8006404 <prvHeapInit+0xb0>)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <prvHeapInit+0xb0>)
 8006394:	2200      	movs	r2, #0
 8006396:	605a      	str	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	4413      	add	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	2208      	movs	r2, #8
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0307 	bic.w	r3, r3, #7
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4a15      	ldr	r2, [pc, #84]	; (8006408 <prvHeapInit+0xb4>)
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	4b14      	ldr	r3, [pc, #80]	; (8006408 <prvHeapInit+0xb4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2200      	movs	r2, #0
 80063bc:	605a      	str	r2, [r3, #4]
 80063be:	4b12      	ldr	r3, [pc, #72]	; (8006408 <prvHeapInit+0xb4>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	1ad2      	subs	r2, r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	605a      	str	r2, [r3, #4]
 80063d4:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <prvHeapInit+0xb4>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	4a0a      	ldr	r2, [pc, #40]	; (800640c <prvHeapInit+0xb8>)
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	4a09      	ldr	r2, [pc, #36]	; (8006410 <prvHeapInit+0xbc>)
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	4b09      	ldr	r3, [pc, #36]	; (8006414 <prvHeapInit+0xc0>)
 80063ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	bf00      	nop
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	20000570 	.word	0x20000570
 8006404:	20004170 	.word	0x20004170
 8006408:	20004178 	.word	0x20004178
 800640c:	20004180 	.word	0x20004180
 8006410:	2000417c 	.word	0x2000417c
 8006414:	2000418c 	.word	0x2000418c

08006418 <prvInsertBlockIntoFreeList>:
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	4b28      	ldr	r3, [pc, #160]	; (80064c4 <prvInsertBlockIntoFreeList+0xac>)
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e002      	b.n	800642c <prvInsertBlockIntoFreeList+0x14>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	429a      	cmp	r2, r3
 8006434:	d8f7      	bhi.n	8006426 <prvInsertBlockIntoFreeList+0xe>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	4413      	add	r3, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	429a      	cmp	r2, r3
 8006446:	d108      	bne.n	800645a <prvInsertBlockIntoFreeList+0x42>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	441a      	add	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	605a      	str	r2, [r3, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	607b      	str	r3, [r7, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	60bb      	str	r3, [r7, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	441a      	add	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d118      	bne.n	80064a0 <prvInsertBlockIntoFreeList+0x88>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d00d      	beq.n	8006496 <prvInsertBlockIntoFreeList+0x7e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	441a      	add	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	605a      	str	r2, [r3, #4]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e008      	b.n	80064a8 <prvInsertBlockIntoFreeList+0x90>
 8006496:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	e003      	b.n	80064a8 <prvInsertBlockIntoFreeList+0x90>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d002      	beq.n	80064b6 <prvInsertBlockIntoFreeList+0x9e>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	bf00      	nop
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	20004170 	.word	0x20004170
 80064c8:	20004178 	.word	0x20004178

080064cc <__errno>:
 80064cc:	4b01      	ldr	r3, [pc, #4]	; (80064d4 <__errno+0x8>)
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	2000001c 	.word	0x2000001c

080064d8 <__libc_init_array>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	4d0d      	ldr	r5, [pc, #52]	; (8006510 <__libc_init_array+0x38>)
 80064dc:	4c0d      	ldr	r4, [pc, #52]	; (8006514 <__libc_init_array+0x3c>)
 80064de:	1b64      	subs	r4, r4, r5
 80064e0:	10a4      	asrs	r4, r4, #2
 80064e2:	2600      	movs	r6, #0
 80064e4:	42a6      	cmp	r6, r4
 80064e6:	d109      	bne.n	80064fc <__libc_init_array+0x24>
 80064e8:	4d0b      	ldr	r5, [pc, #44]	; (8006518 <__libc_init_array+0x40>)
 80064ea:	4c0c      	ldr	r4, [pc, #48]	; (800651c <__libc_init_array+0x44>)
 80064ec:	f000 fc8e 	bl	8006e0c <_init>
 80064f0:	1b64      	subs	r4, r4, r5
 80064f2:	10a4      	asrs	r4, r4, #2
 80064f4:	2600      	movs	r6, #0
 80064f6:	42a6      	cmp	r6, r4
 80064f8:	d105      	bne.n	8006506 <__libc_init_array+0x2e>
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006500:	4798      	blx	r3
 8006502:	3601      	adds	r6, #1
 8006504:	e7ee      	b.n	80064e4 <__libc_init_array+0xc>
 8006506:	f855 3b04 	ldr.w	r3, [r5], #4
 800650a:	4798      	blx	r3
 800650c:	3601      	adds	r6, #1
 800650e:	e7f2      	b.n	80064f6 <__libc_init_array+0x1e>
 8006510:	08006f54 	.word	0x08006f54
 8006514:	08006f54 	.word	0x08006f54
 8006518:	08006f54 	.word	0x08006f54
 800651c:	08006f58 	.word	0x08006f58

08006520 <memcpy>:
 8006520:	440a      	add	r2, r1
 8006522:	4291      	cmp	r1, r2
 8006524:	f100 33ff 	add.w	r3, r0, #4294967295
 8006528:	d100      	bne.n	800652c <memcpy+0xc>
 800652a:	4770      	bx	lr
 800652c:	b510      	push	{r4, lr}
 800652e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006532:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006536:	4291      	cmp	r1, r2
 8006538:	d1f9      	bne.n	800652e <memcpy+0xe>
 800653a:	bd10      	pop	{r4, pc}

0800653c <memset>:
 800653c:	4402      	add	r2, r0
 800653e:	4603      	mov	r3, r0
 8006540:	4293      	cmp	r3, r2
 8006542:	d100      	bne.n	8006546 <memset+0xa>
 8006544:	4770      	bx	lr
 8006546:	f803 1b01 	strb.w	r1, [r3], #1
 800654a:	e7f9      	b.n	8006540 <memset+0x4>

0800654c <siprintf>:
 800654c:	b40e      	push	{r1, r2, r3}
 800654e:	b500      	push	{lr}
 8006550:	b09c      	sub	sp, #112	; 0x70
 8006552:	ab1d      	add	r3, sp, #116	; 0x74
 8006554:	9002      	str	r0, [sp, #8]
 8006556:	9006      	str	r0, [sp, #24]
 8006558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800655c:	4809      	ldr	r0, [pc, #36]	; (8006584 <siprintf+0x38>)
 800655e:	9107      	str	r1, [sp, #28]
 8006560:	9104      	str	r1, [sp, #16]
 8006562:	4909      	ldr	r1, [pc, #36]	; (8006588 <siprintf+0x3c>)
 8006564:	f853 2b04 	ldr.w	r2, [r3], #4
 8006568:	9105      	str	r1, [sp, #20]
 800656a:	6800      	ldr	r0, [r0, #0]
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	a902      	add	r1, sp, #8
 8006570:	f000 f868 	bl	8006644 <_svfiprintf_r>
 8006574:	9b02      	ldr	r3, [sp, #8]
 8006576:	2200      	movs	r2, #0
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	b01c      	add	sp, #112	; 0x70
 800657c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006580:	b003      	add	sp, #12
 8006582:	4770      	bx	lr
 8006584:	2000001c 	.word	0x2000001c
 8006588:	ffff0208 	.word	0xffff0208

0800658c <__ssputs_r>:
 800658c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	688e      	ldr	r6, [r1, #8]
 8006592:	429e      	cmp	r6, r3
 8006594:	4682      	mov	sl, r0
 8006596:	460c      	mov	r4, r1
 8006598:	4690      	mov	r8, r2
 800659a:	461f      	mov	r7, r3
 800659c:	d838      	bhi.n	8006610 <__ssputs_r+0x84>
 800659e:	898a      	ldrh	r2, [r1, #12]
 80065a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065a4:	d032      	beq.n	800660c <__ssputs_r+0x80>
 80065a6:	6825      	ldr	r5, [r4, #0]
 80065a8:	6909      	ldr	r1, [r1, #16]
 80065aa:	eba5 0901 	sub.w	r9, r5, r1
 80065ae:	6965      	ldr	r5, [r4, #20]
 80065b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065b8:	3301      	adds	r3, #1
 80065ba:	444b      	add	r3, r9
 80065bc:	106d      	asrs	r5, r5, #1
 80065be:	429d      	cmp	r5, r3
 80065c0:	bf38      	it	cc
 80065c2:	461d      	movcc	r5, r3
 80065c4:	0553      	lsls	r3, r2, #21
 80065c6:	d531      	bpl.n	800662c <__ssputs_r+0xa0>
 80065c8:	4629      	mov	r1, r5
 80065ca:	f000 fb55 	bl	8006c78 <_malloc_r>
 80065ce:	4606      	mov	r6, r0
 80065d0:	b950      	cbnz	r0, 80065e8 <__ssputs_r+0x5c>
 80065d2:	230c      	movs	r3, #12
 80065d4:	f8ca 3000 	str.w	r3, [sl]
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065de:	81a3      	strh	r3, [r4, #12]
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e8:	6921      	ldr	r1, [r4, #16]
 80065ea:	464a      	mov	r2, r9
 80065ec:	f7ff ff98 	bl	8006520 <memcpy>
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	6126      	str	r6, [r4, #16]
 80065fe:	6165      	str	r5, [r4, #20]
 8006600:	444e      	add	r6, r9
 8006602:	eba5 0509 	sub.w	r5, r5, r9
 8006606:	6026      	str	r6, [r4, #0]
 8006608:	60a5      	str	r5, [r4, #8]
 800660a:	463e      	mov	r6, r7
 800660c:	42be      	cmp	r6, r7
 800660e:	d900      	bls.n	8006612 <__ssputs_r+0x86>
 8006610:	463e      	mov	r6, r7
 8006612:	6820      	ldr	r0, [r4, #0]
 8006614:	4632      	mov	r2, r6
 8006616:	4641      	mov	r1, r8
 8006618:	f000 faa8 	bl	8006b6c <memmove>
 800661c:	68a3      	ldr	r3, [r4, #8]
 800661e:	1b9b      	subs	r3, r3, r6
 8006620:	60a3      	str	r3, [r4, #8]
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	4433      	add	r3, r6
 8006626:	6023      	str	r3, [r4, #0]
 8006628:	2000      	movs	r0, #0
 800662a:	e7db      	b.n	80065e4 <__ssputs_r+0x58>
 800662c:	462a      	mov	r2, r5
 800662e:	f000 fb97 	bl	8006d60 <_realloc_r>
 8006632:	4606      	mov	r6, r0
 8006634:	2800      	cmp	r0, #0
 8006636:	d1e1      	bne.n	80065fc <__ssputs_r+0x70>
 8006638:	6921      	ldr	r1, [r4, #16]
 800663a:	4650      	mov	r0, sl
 800663c:	f000 fab0 	bl	8006ba0 <_free_r>
 8006640:	e7c7      	b.n	80065d2 <__ssputs_r+0x46>
	...

08006644 <_svfiprintf_r>:
 8006644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006648:	4698      	mov	r8, r3
 800664a:	898b      	ldrh	r3, [r1, #12]
 800664c:	061b      	lsls	r3, r3, #24
 800664e:	b09d      	sub	sp, #116	; 0x74
 8006650:	4607      	mov	r7, r0
 8006652:	460d      	mov	r5, r1
 8006654:	4614      	mov	r4, r2
 8006656:	d50e      	bpl.n	8006676 <_svfiprintf_r+0x32>
 8006658:	690b      	ldr	r3, [r1, #16]
 800665a:	b963      	cbnz	r3, 8006676 <_svfiprintf_r+0x32>
 800665c:	2140      	movs	r1, #64	; 0x40
 800665e:	f000 fb0b 	bl	8006c78 <_malloc_r>
 8006662:	6028      	str	r0, [r5, #0]
 8006664:	6128      	str	r0, [r5, #16]
 8006666:	b920      	cbnz	r0, 8006672 <_svfiprintf_r+0x2e>
 8006668:	230c      	movs	r3, #12
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	f04f 30ff 	mov.w	r0, #4294967295
 8006670:	e0d1      	b.n	8006816 <_svfiprintf_r+0x1d2>
 8006672:	2340      	movs	r3, #64	; 0x40
 8006674:	616b      	str	r3, [r5, #20]
 8006676:	2300      	movs	r3, #0
 8006678:	9309      	str	r3, [sp, #36]	; 0x24
 800667a:	2320      	movs	r3, #32
 800667c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006680:	f8cd 800c 	str.w	r8, [sp, #12]
 8006684:	2330      	movs	r3, #48	; 0x30
 8006686:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006830 <_svfiprintf_r+0x1ec>
 800668a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800668e:	f04f 0901 	mov.w	r9, #1
 8006692:	4623      	mov	r3, r4
 8006694:	469a      	mov	sl, r3
 8006696:	f813 2b01 	ldrb.w	r2, [r3], #1
 800669a:	b10a      	cbz	r2, 80066a0 <_svfiprintf_r+0x5c>
 800669c:	2a25      	cmp	r2, #37	; 0x25
 800669e:	d1f9      	bne.n	8006694 <_svfiprintf_r+0x50>
 80066a0:	ebba 0b04 	subs.w	fp, sl, r4
 80066a4:	d00b      	beq.n	80066be <_svfiprintf_r+0x7a>
 80066a6:	465b      	mov	r3, fp
 80066a8:	4622      	mov	r2, r4
 80066aa:	4629      	mov	r1, r5
 80066ac:	4638      	mov	r0, r7
 80066ae:	f7ff ff6d 	bl	800658c <__ssputs_r>
 80066b2:	3001      	adds	r0, #1
 80066b4:	f000 80aa 	beq.w	800680c <_svfiprintf_r+0x1c8>
 80066b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066ba:	445a      	add	r2, fp
 80066bc:	9209      	str	r2, [sp, #36]	; 0x24
 80066be:	f89a 3000 	ldrb.w	r3, [sl]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80a2 	beq.w	800680c <_svfiprintf_r+0x1c8>
 80066c8:	2300      	movs	r3, #0
 80066ca:	f04f 32ff 	mov.w	r2, #4294967295
 80066ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066d2:	f10a 0a01 	add.w	sl, sl, #1
 80066d6:	9304      	str	r3, [sp, #16]
 80066d8:	9307      	str	r3, [sp, #28]
 80066da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066de:	931a      	str	r3, [sp, #104]	; 0x68
 80066e0:	4654      	mov	r4, sl
 80066e2:	2205      	movs	r2, #5
 80066e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e8:	4851      	ldr	r0, [pc, #324]	; (8006830 <_svfiprintf_r+0x1ec>)
 80066ea:	f7f9 fda1 	bl	8000230 <memchr>
 80066ee:	9a04      	ldr	r2, [sp, #16]
 80066f0:	b9d8      	cbnz	r0, 800672a <_svfiprintf_r+0xe6>
 80066f2:	06d0      	lsls	r0, r2, #27
 80066f4:	bf44      	itt	mi
 80066f6:	2320      	movmi	r3, #32
 80066f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066fc:	0711      	lsls	r1, r2, #28
 80066fe:	bf44      	itt	mi
 8006700:	232b      	movmi	r3, #43	; 0x2b
 8006702:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006706:	f89a 3000 	ldrb.w	r3, [sl]
 800670a:	2b2a      	cmp	r3, #42	; 0x2a
 800670c:	d015      	beq.n	800673a <_svfiprintf_r+0xf6>
 800670e:	9a07      	ldr	r2, [sp, #28]
 8006710:	4654      	mov	r4, sl
 8006712:	2000      	movs	r0, #0
 8006714:	f04f 0c0a 	mov.w	ip, #10
 8006718:	4621      	mov	r1, r4
 800671a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800671e:	3b30      	subs	r3, #48	; 0x30
 8006720:	2b09      	cmp	r3, #9
 8006722:	d94e      	bls.n	80067c2 <_svfiprintf_r+0x17e>
 8006724:	b1b0      	cbz	r0, 8006754 <_svfiprintf_r+0x110>
 8006726:	9207      	str	r2, [sp, #28]
 8006728:	e014      	b.n	8006754 <_svfiprintf_r+0x110>
 800672a:	eba0 0308 	sub.w	r3, r0, r8
 800672e:	fa09 f303 	lsl.w	r3, r9, r3
 8006732:	4313      	orrs	r3, r2
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	46a2      	mov	sl, r4
 8006738:	e7d2      	b.n	80066e0 <_svfiprintf_r+0x9c>
 800673a:	9b03      	ldr	r3, [sp, #12]
 800673c:	1d19      	adds	r1, r3, #4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	9103      	str	r1, [sp, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	bfbb      	ittet	lt
 8006746:	425b      	neglt	r3, r3
 8006748:	f042 0202 	orrlt.w	r2, r2, #2
 800674c:	9307      	strge	r3, [sp, #28]
 800674e:	9307      	strlt	r3, [sp, #28]
 8006750:	bfb8      	it	lt
 8006752:	9204      	strlt	r2, [sp, #16]
 8006754:	7823      	ldrb	r3, [r4, #0]
 8006756:	2b2e      	cmp	r3, #46	; 0x2e
 8006758:	d10c      	bne.n	8006774 <_svfiprintf_r+0x130>
 800675a:	7863      	ldrb	r3, [r4, #1]
 800675c:	2b2a      	cmp	r3, #42	; 0x2a
 800675e:	d135      	bne.n	80067cc <_svfiprintf_r+0x188>
 8006760:	9b03      	ldr	r3, [sp, #12]
 8006762:	1d1a      	adds	r2, r3, #4
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	9203      	str	r2, [sp, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	bfb8      	it	lt
 800676c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006770:	3402      	adds	r4, #2
 8006772:	9305      	str	r3, [sp, #20]
 8006774:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006840 <_svfiprintf_r+0x1fc>
 8006778:	7821      	ldrb	r1, [r4, #0]
 800677a:	2203      	movs	r2, #3
 800677c:	4650      	mov	r0, sl
 800677e:	f7f9 fd57 	bl	8000230 <memchr>
 8006782:	b140      	cbz	r0, 8006796 <_svfiprintf_r+0x152>
 8006784:	2340      	movs	r3, #64	; 0x40
 8006786:	eba0 000a 	sub.w	r0, r0, sl
 800678a:	fa03 f000 	lsl.w	r0, r3, r0
 800678e:	9b04      	ldr	r3, [sp, #16]
 8006790:	4303      	orrs	r3, r0
 8006792:	3401      	adds	r4, #1
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679a:	4826      	ldr	r0, [pc, #152]	; (8006834 <_svfiprintf_r+0x1f0>)
 800679c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067a0:	2206      	movs	r2, #6
 80067a2:	f7f9 fd45 	bl	8000230 <memchr>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d038      	beq.n	800681c <_svfiprintf_r+0x1d8>
 80067aa:	4b23      	ldr	r3, [pc, #140]	; (8006838 <_svfiprintf_r+0x1f4>)
 80067ac:	bb1b      	cbnz	r3, 80067f6 <_svfiprintf_r+0x1b2>
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	3307      	adds	r3, #7
 80067b2:	f023 0307 	bic.w	r3, r3, #7
 80067b6:	3308      	adds	r3, #8
 80067b8:	9303      	str	r3, [sp, #12]
 80067ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067bc:	4433      	add	r3, r6
 80067be:	9309      	str	r3, [sp, #36]	; 0x24
 80067c0:	e767      	b.n	8006692 <_svfiprintf_r+0x4e>
 80067c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80067c6:	460c      	mov	r4, r1
 80067c8:	2001      	movs	r0, #1
 80067ca:	e7a5      	b.n	8006718 <_svfiprintf_r+0xd4>
 80067cc:	2300      	movs	r3, #0
 80067ce:	3401      	adds	r4, #1
 80067d0:	9305      	str	r3, [sp, #20]
 80067d2:	4619      	mov	r1, r3
 80067d4:	f04f 0c0a 	mov.w	ip, #10
 80067d8:	4620      	mov	r0, r4
 80067da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067de:	3a30      	subs	r2, #48	; 0x30
 80067e0:	2a09      	cmp	r2, #9
 80067e2:	d903      	bls.n	80067ec <_svfiprintf_r+0x1a8>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0c5      	beq.n	8006774 <_svfiprintf_r+0x130>
 80067e8:	9105      	str	r1, [sp, #20]
 80067ea:	e7c3      	b.n	8006774 <_svfiprintf_r+0x130>
 80067ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80067f0:	4604      	mov	r4, r0
 80067f2:	2301      	movs	r3, #1
 80067f4:	e7f0      	b.n	80067d8 <_svfiprintf_r+0x194>
 80067f6:	ab03      	add	r3, sp, #12
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	462a      	mov	r2, r5
 80067fc:	4b0f      	ldr	r3, [pc, #60]	; (800683c <_svfiprintf_r+0x1f8>)
 80067fe:	a904      	add	r1, sp, #16
 8006800:	4638      	mov	r0, r7
 8006802:	f3af 8000 	nop.w
 8006806:	1c42      	adds	r2, r0, #1
 8006808:	4606      	mov	r6, r0
 800680a:	d1d6      	bne.n	80067ba <_svfiprintf_r+0x176>
 800680c:	89ab      	ldrh	r3, [r5, #12]
 800680e:	065b      	lsls	r3, r3, #25
 8006810:	f53f af2c 	bmi.w	800666c <_svfiprintf_r+0x28>
 8006814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006816:	b01d      	add	sp, #116	; 0x74
 8006818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681c:	ab03      	add	r3, sp, #12
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	462a      	mov	r2, r5
 8006822:	4b06      	ldr	r3, [pc, #24]	; (800683c <_svfiprintf_r+0x1f8>)
 8006824:	a904      	add	r1, sp, #16
 8006826:	4638      	mov	r0, r7
 8006828:	f000 f87a 	bl	8006920 <_printf_i>
 800682c:	e7eb      	b.n	8006806 <_svfiprintf_r+0x1c2>
 800682e:	bf00      	nop
 8006830:	08006f18 	.word	0x08006f18
 8006834:	08006f22 	.word	0x08006f22
 8006838:	00000000 	.word	0x00000000
 800683c:	0800658d 	.word	0x0800658d
 8006840:	08006f1e 	.word	0x08006f1e

08006844 <_printf_common>:
 8006844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	4616      	mov	r6, r2
 800684a:	4699      	mov	r9, r3
 800684c:	688a      	ldr	r2, [r1, #8]
 800684e:	690b      	ldr	r3, [r1, #16]
 8006850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006854:	4293      	cmp	r3, r2
 8006856:	bfb8      	it	lt
 8006858:	4613      	movlt	r3, r2
 800685a:	6033      	str	r3, [r6, #0]
 800685c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006860:	4607      	mov	r7, r0
 8006862:	460c      	mov	r4, r1
 8006864:	b10a      	cbz	r2, 800686a <_printf_common+0x26>
 8006866:	3301      	adds	r3, #1
 8006868:	6033      	str	r3, [r6, #0]
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	0699      	lsls	r1, r3, #26
 800686e:	bf42      	ittt	mi
 8006870:	6833      	ldrmi	r3, [r6, #0]
 8006872:	3302      	addmi	r3, #2
 8006874:	6033      	strmi	r3, [r6, #0]
 8006876:	6825      	ldr	r5, [r4, #0]
 8006878:	f015 0506 	ands.w	r5, r5, #6
 800687c:	d106      	bne.n	800688c <_printf_common+0x48>
 800687e:	f104 0a19 	add.w	sl, r4, #25
 8006882:	68e3      	ldr	r3, [r4, #12]
 8006884:	6832      	ldr	r2, [r6, #0]
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	42ab      	cmp	r3, r5
 800688a:	dc26      	bgt.n	80068da <_printf_common+0x96>
 800688c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006890:	1e13      	subs	r3, r2, #0
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	bf18      	it	ne
 8006896:	2301      	movne	r3, #1
 8006898:	0692      	lsls	r2, r2, #26
 800689a:	d42b      	bmi.n	80068f4 <_printf_common+0xb0>
 800689c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068a0:	4649      	mov	r1, r9
 80068a2:	4638      	mov	r0, r7
 80068a4:	47c0      	blx	r8
 80068a6:	3001      	adds	r0, #1
 80068a8:	d01e      	beq.n	80068e8 <_printf_common+0xa4>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	68e5      	ldr	r5, [r4, #12]
 80068ae:	6832      	ldr	r2, [r6, #0]
 80068b0:	f003 0306 	and.w	r3, r3, #6
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	bf08      	it	eq
 80068b8:	1aad      	subeq	r5, r5, r2
 80068ba:	68a3      	ldr	r3, [r4, #8]
 80068bc:	6922      	ldr	r2, [r4, #16]
 80068be:	bf0c      	ite	eq
 80068c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068c4:	2500      	movne	r5, #0
 80068c6:	4293      	cmp	r3, r2
 80068c8:	bfc4      	itt	gt
 80068ca:	1a9b      	subgt	r3, r3, r2
 80068cc:	18ed      	addgt	r5, r5, r3
 80068ce:	2600      	movs	r6, #0
 80068d0:	341a      	adds	r4, #26
 80068d2:	42b5      	cmp	r5, r6
 80068d4:	d11a      	bne.n	800690c <_printf_common+0xc8>
 80068d6:	2000      	movs	r0, #0
 80068d8:	e008      	b.n	80068ec <_printf_common+0xa8>
 80068da:	2301      	movs	r3, #1
 80068dc:	4652      	mov	r2, sl
 80068de:	4649      	mov	r1, r9
 80068e0:	4638      	mov	r0, r7
 80068e2:	47c0      	blx	r8
 80068e4:	3001      	adds	r0, #1
 80068e6:	d103      	bne.n	80068f0 <_printf_common+0xac>
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f0:	3501      	adds	r5, #1
 80068f2:	e7c6      	b.n	8006882 <_printf_common+0x3e>
 80068f4:	18e1      	adds	r1, r4, r3
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	2030      	movs	r0, #48	; 0x30
 80068fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068fe:	4422      	add	r2, r4
 8006900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006908:	3302      	adds	r3, #2
 800690a:	e7c7      	b.n	800689c <_printf_common+0x58>
 800690c:	2301      	movs	r3, #1
 800690e:	4622      	mov	r2, r4
 8006910:	4649      	mov	r1, r9
 8006912:	4638      	mov	r0, r7
 8006914:	47c0      	blx	r8
 8006916:	3001      	adds	r0, #1
 8006918:	d0e6      	beq.n	80068e8 <_printf_common+0xa4>
 800691a:	3601      	adds	r6, #1
 800691c:	e7d9      	b.n	80068d2 <_printf_common+0x8e>
	...

08006920 <_printf_i>:
 8006920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	7e0f      	ldrb	r7, [r1, #24]
 8006926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006928:	2f78      	cmp	r7, #120	; 0x78
 800692a:	4691      	mov	r9, r2
 800692c:	4680      	mov	r8, r0
 800692e:	460c      	mov	r4, r1
 8006930:	469a      	mov	sl, r3
 8006932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006936:	d807      	bhi.n	8006948 <_printf_i+0x28>
 8006938:	2f62      	cmp	r7, #98	; 0x62
 800693a:	d80a      	bhi.n	8006952 <_printf_i+0x32>
 800693c:	2f00      	cmp	r7, #0
 800693e:	f000 80d8 	beq.w	8006af2 <_printf_i+0x1d2>
 8006942:	2f58      	cmp	r7, #88	; 0x58
 8006944:	f000 80a3 	beq.w	8006a8e <_printf_i+0x16e>
 8006948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800694c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006950:	e03a      	b.n	80069c8 <_printf_i+0xa8>
 8006952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006956:	2b15      	cmp	r3, #21
 8006958:	d8f6      	bhi.n	8006948 <_printf_i+0x28>
 800695a:	a101      	add	r1, pc, #4	; (adr r1, 8006960 <_printf_i+0x40>)
 800695c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006960:	080069b9 	.word	0x080069b9
 8006964:	080069cd 	.word	0x080069cd
 8006968:	08006949 	.word	0x08006949
 800696c:	08006949 	.word	0x08006949
 8006970:	08006949 	.word	0x08006949
 8006974:	08006949 	.word	0x08006949
 8006978:	080069cd 	.word	0x080069cd
 800697c:	08006949 	.word	0x08006949
 8006980:	08006949 	.word	0x08006949
 8006984:	08006949 	.word	0x08006949
 8006988:	08006949 	.word	0x08006949
 800698c:	08006ad9 	.word	0x08006ad9
 8006990:	080069fd 	.word	0x080069fd
 8006994:	08006abb 	.word	0x08006abb
 8006998:	08006949 	.word	0x08006949
 800699c:	08006949 	.word	0x08006949
 80069a0:	08006afb 	.word	0x08006afb
 80069a4:	08006949 	.word	0x08006949
 80069a8:	080069fd 	.word	0x080069fd
 80069ac:	08006949 	.word	0x08006949
 80069b0:	08006949 	.word	0x08006949
 80069b4:	08006ac3 	.word	0x08006ac3
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	1d1a      	adds	r2, r3, #4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	602a      	str	r2, [r5, #0]
 80069c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0a3      	b.n	8006b14 <_printf_i+0x1f4>
 80069cc:	6820      	ldr	r0, [r4, #0]
 80069ce:	6829      	ldr	r1, [r5, #0]
 80069d0:	0606      	lsls	r6, r0, #24
 80069d2:	f101 0304 	add.w	r3, r1, #4
 80069d6:	d50a      	bpl.n	80069ee <_printf_i+0xce>
 80069d8:	680e      	ldr	r6, [r1, #0]
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	2e00      	cmp	r6, #0
 80069de:	da03      	bge.n	80069e8 <_printf_i+0xc8>
 80069e0:	232d      	movs	r3, #45	; 0x2d
 80069e2:	4276      	negs	r6, r6
 80069e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e8:	485e      	ldr	r0, [pc, #376]	; (8006b64 <_printf_i+0x244>)
 80069ea:	230a      	movs	r3, #10
 80069ec:	e019      	b.n	8006a22 <_printf_i+0x102>
 80069ee:	680e      	ldr	r6, [r1, #0]
 80069f0:	602b      	str	r3, [r5, #0]
 80069f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069f6:	bf18      	it	ne
 80069f8:	b236      	sxthne	r6, r6
 80069fa:	e7ef      	b.n	80069dc <_printf_i+0xbc>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	6820      	ldr	r0, [r4, #0]
 8006a00:	1d19      	adds	r1, r3, #4
 8006a02:	6029      	str	r1, [r5, #0]
 8006a04:	0601      	lsls	r1, r0, #24
 8006a06:	d501      	bpl.n	8006a0c <_printf_i+0xec>
 8006a08:	681e      	ldr	r6, [r3, #0]
 8006a0a:	e002      	b.n	8006a12 <_printf_i+0xf2>
 8006a0c:	0646      	lsls	r6, r0, #25
 8006a0e:	d5fb      	bpl.n	8006a08 <_printf_i+0xe8>
 8006a10:	881e      	ldrh	r6, [r3, #0]
 8006a12:	4854      	ldr	r0, [pc, #336]	; (8006b64 <_printf_i+0x244>)
 8006a14:	2f6f      	cmp	r7, #111	; 0x6f
 8006a16:	bf0c      	ite	eq
 8006a18:	2308      	moveq	r3, #8
 8006a1a:	230a      	movne	r3, #10
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a22:	6865      	ldr	r5, [r4, #4]
 8006a24:	60a5      	str	r5, [r4, #8]
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	bfa2      	ittt	ge
 8006a2a:	6821      	ldrge	r1, [r4, #0]
 8006a2c:	f021 0104 	bicge.w	r1, r1, #4
 8006a30:	6021      	strge	r1, [r4, #0]
 8006a32:	b90e      	cbnz	r6, 8006a38 <_printf_i+0x118>
 8006a34:	2d00      	cmp	r5, #0
 8006a36:	d04d      	beq.n	8006ad4 <_printf_i+0x1b4>
 8006a38:	4615      	mov	r5, r2
 8006a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8006a42:	5dc7      	ldrb	r7, [r0, r7]
 8006a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a48:	4637      	mov	r7, r6
 8006a4a:	42bb      	cmp	r3, r7
 8006a4c:	460e      	mov	r6, r1
 8006a4e:	d9f4      	bls.n	8006a3a <_printf_i+0x11a>
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d10b      	bne.n	8006a6c <_printf_i+0x14c>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	07de      	lsls	r6, r3, #31
 8006a58:	d508      	bpl.n	8006a6c <_printf_i+0x14c>
 8006a5a:	6923      	ldr	r3, [r4, #16]
 8006a5c:	6861      	ldr	r1, [r4, #4]
 8006a5e:	4299      	cmp	r1, r3
 8006a60:	bfde      	ittt	le
 8006a62:	2330      	movle	r3, #48	; 0x30
 8006a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a6c:	1b52      	subs	r2, r2, r5
 8006a6e:	6122      	str	r2, [r4, #16]
 8006a70:	f8cd a000 	str.w	sl, [sp]
 8006a74:	464b      	mov	r3, r9
 8006a76:	aa03      	add	r2, sp, #12
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	f7ff fee2 	bl	8006844 <_printf_common>
 8006a80:	3001      	adds	r0, #1
 8006a82:	d14c      	bne.n	8006b1e <_printf_i+0x1fe>
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	b004      	add	sp, #16
 8006a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8e:	4835      	ldr	r0, [pc, #212]	; (8006b64 <_printf_i+0x244>)
 8006a90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a94:	6829      	ldr	r1, [r5, #0]
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a9c:	6029      	str	r1, [r5, #0]
 8006a9e:	061d      	lsls	r5, r3, #24
 8006aa0:	d514      	bpl.n	8006acc <_printf_i+0x1ac>
 8006aa2:	07df      	lsls	r7, r3, #31
 8006aa4:	bf44      	itt	mi
 8006aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8006aaa:	6023      	strmi	r3, [r4, #0]
 8006aac:	b91e      	cbnz	r6, 8006ab6 <_printf_i+0x196>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	f023 0320 	bic.w	r3, r3, #32
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	2310      	movs	r3, #16
 8006ab8:	e7b0      	b.n	8006a1c <_printf_i+0xfc>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	f043 0320 	orr.w	r3, r3, #32
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	2378      	movs	r3, #120	; 0x78
 8006ac4:	4828      	ldr	r0, [pc, #160]	; (8006b68 <_printf_i+0x248>)
 8006ac6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006aca:	e7e3      	b.n	8006a94 <_printf_i+0x174>
 8006acc:	0659      	lsls	r1, r3, #25
 8006ace:	bf48      	it	mi
 8006ad0:	b2b6      	uxthmi	r6, r6
 8006ad2:	e7e6      	b.n	8006aa2 <_printf_i+0x182>
 8006ad4:	4615      	mov	r5, r2
 8006ad6:	e7bb      	b.n	8006a50 <_printf_i+0x130>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	6826      	ldr	r6, [r4, #0]
 8006adc:	6961      	ldr	r1, [r4, #20]
 8006ade:	1d18      	adds	r0, r3, #4
 8006ae0:	6028      	str	r0, [r5, #0]
 8006ae2:	0635      	lsls	r5, r6, #24
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	d501      	bpl.n	8006aec <_printf_i+0x1cc>
 8006ae8:	6019      	str	r1, [r3, #0]
 8006aea:	e002      	b.n	8006af2 <_printf_i+0x1d2>
 8006aec:	0670      	lsls	r0, r6, #25
 8006aee:	d5fb      	bpl.n	8006ae8 <_printf_i+0x1c8>
 8006af0:	8019      	strh	r1, [r3, #0]
 8006af2:	2300      	movs	r3, #0
 8006af4:	6123      	str	r3, [r4, #16]
 8006af6:	4615      	mov	r5, r2
 8006af8:	e7ba      	b.n	8006a70 <_printf_i+0x150>
 8006afa:	682b      	ldr	r3, [r5, #0]
 8006afc:	1d1a      	adds	r2, r3, #4
 8006afe:	602a      	str	r2, [r5, #0]
 8006b00:	681d      	ldr	r5, [r3, #0]
 8006b02:	6862      	ldr	r2, [r4, #4]
 8006b04:	2100      	movs	r1, #0
 8006b06:	4628      	mov	r0, r5
 8006b08:	f7f9 fb92 	bl	8000230 <memchr>
 8006b0c:	b108      	cbz	r0, 8006b12 <_printf_i+0x1f2>
 8006b0e:	1b40      	subs	r0, r0, r5
 8006b10:	6060      	str	r0, [r4, #4]
 8006b12:	6863      	ldr	r3, [r4, #4]
 8006b14:	6123      	str	r3, [r4, #16]
 8006b16:	2300      	movs	r3, #0
 8006b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b1c:	e7a8      	b.n	8006a70 <_printf_i+0x150>
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	462a      	mov	r2, r5
 8006b22:	4649      	mov	r1, r9
 8006b24:	4640      	mov	r0, r8
 8006b26:	47d0      	blx	sl
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d0ab      	beq.n	8006a84 <_printf_i+0x164>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	079b      	lsls	r3, r3, #30
 8006b30:	d413      	bmi.n	8006b5a <_printf_i+0x23a>
 8006b32:	68e0      	ldr	r0, [r4, #12]
 8006b34:	9b03      	ldr	r3, [sp, #12]
 8006b36:	4298      	cmp	r0, r3
 8006b38:	bfb8      	it	lt
 8006b3a:	4618      	movlt	r0, r3
 8006b3c:	e7a4      	b.n	8006a88 <_printf_i+0x168>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	4632      	mov	r2, r6
 8006b42:	4649      	mov	r1, r9
 8006b44:	4640      	mov	r0, r8
 8006b46:	47d0      	blx	sl
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d09b      	beq.n	8006a84 <_printf_i+0x164>
 8006b4c:	3501      	adds	r5, #1
 8006b4e:	68e3      	ldr	r3, [r4, #12]
 8006b50:	9903      	ldr	r1, [sp, #12]
 8006b52:	1a5b      	subs	r3, r3, r1
 8006b54:	42ab      	cmp	r3, r5
 8006b56:	dcf2      	bgt.n	8006b3e <_printf_i+0x21e>
 8006b58:	e7eb      	b.n	8006b32 <_printf_i+0x212>
 8006b5a:	2500      	movs	r5, #0
 8006b5c:	f104 0619 	add.w	r6, r4, #25
 8006b60:	e7f5      	b.n	8006b4e <_printf_i+0x22e>
 8006b62:	bf00      	nop
 8006b64:	08006f29 	.word	0x08006f29
 8006b68:	08006f3a 	.word	0x08006f3a

08006b6c <memmove>:
 8006b6c:	4288      	cmp	r0, r1
 8006b6e:	b510      	push	{r4, lr}
 8006b70:	eb01 0402 	add.w	r4, r1, r2
 8006b74:	d902      	bls.n	8006b7c <memmove+0x10>
 8006b76:	4284      	cmp	r4, r0
 8006b78:	4623      	mov	r3, r4
 8006b7a:	d807      	bhi.n	8006b8c <memmove+0x20>
 8006b7c:	1e43      	subs	r3, r0, #1
 8006b7e:	42a1      	cmp	r1, r4
 8006b80:	d008      	beq.n	8006b94 <memmove+0x28>
 8006b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b8a:	e7f8      	b.n	8006b7e <memmove+0x12>
 8006b8c:	4402      	add	r2, r0
 8006b8e:	4601      	mov	r1, r0
 8006b90:	428a      	cmp	r2, r1
 8006b92:	d100      	bne.n	8006b96 <memmove+0x2a>
 8006b94:	bd10      	pop	{r4, pc}
 8006b96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b9e:	e7f7      	b.n	8006b90 <memmove+0x24>

08006ba0 <_free_r>:
 8006ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ba2:	2900      	cmp	r1, #0
 8006ba4:	d044      	beq.n	8006c30 <_free_r+0x90>
 8006ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006baa:	9001      	str	r0, [sp, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f1a1 0404 	sub.w	r4, r1, #4
 8006bb2:	bfb8      	it	lt
 8006bb4:	18e4      	addlt	r4, r4, r3
 8006bb6:	f000 f913 	bl	8006de0 <__malloc_lock>
 8006bba:	4a1e      	ldr	r2, [pc, #120]	; (8006c34 <_free_r+0x94>)
 8006bbc:	9801      	ldr	r0, [sp, #4]
 8006bbe:	6813      	ldr	r3, [r2, #0]
 8006bc0:	b933      	cbnz	r3, 8006bd0 <_free_r+0x30>
 8006bc2:	6063      	str	r3, [r4, #4]
 8006bc4:	6014      	str	r4, [r2, #0]
 8006bc6:	b003      	add	sp, #12
 8006bc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bcc:	f000 b90e 	b.w	8006dec <__malloc_unlock>
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	d908      	bls.n	8006be6 <_free_r+0x46>
 8006bd4:	6825      	ldr	r5, [r4, #0]
 8006bd6:	1961      	adds	r1, r4, r5
 8006bd8:	428b      	cmp	r3, r1
 8006bda:	bf01      	itttt	eq
 8006bdc:	6819      	ldreq	r1, [r3, #0]
 8006bde:	685b      	ldreq	r3, [r3, #4]
 8006be0:	1949      	addeq	r1, r1, r5
 8006be2:	6021      	streq	r1, [r4, #0]
 8006be4:	e7ed      	b.n	8006bc2 <_free_r+0x22>
 8006be6:	461a      	mov	r2, r3
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	b10b      	cbz	r3, 8006bf0 <_free_r+0x50>
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	d9fa      	bls.n	8006be6 <_free_r+0x46>
 8006bf0:	6811      	ldr	r1, [r2, #0]
 8006bf2:	1855      	adds	r5, r2, r1
 8006bf4:	42a5      	cmp	r5, r4
 8006bf6:	d10b      	bne.n	8006c10 <_free_r+0x70>
 8006bf8:	6824      	ldr	r4, [r4, #0]
 8006bfa:	4421      	add	r1, r4
 8006bfc:	1854      	adds	r4, r2, r1
 8006bfe:	42a3      	cmp	r3, r4
 8006c00:	6011      	str	r1, [r2, #0]
 8006c02:	d1e0      	bne.n	8006bc6 <_free_r+0x26>
 8006c04:	681c      	ldr	r4, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	6053      	str	r3, [r2, #4]
 8006c0a:	4421      	add	r1, r4
 8006c0c:	6011      	str	r1, [r2, #0]
 8006c0e:	e7da      	b.n	8006bc6 <_free_r+0x26>
 8006c10:	d902      	bls.n	8006c18 <_free_r+0x78>
 8006c12:	230c      	movs	r3, #12
 8006c14:	6003      	str	r3, [r0, #0]
 8006c16:	e7d6      	b.n	8006bc6 <_free_r+0x26>
 8006c18:	6825      	ldr	r5, [r4, #0]
 8006c1a:	1961      	adds	r1, r4, r5
 8006c1c:	428b      	cmp	r3, r1
 8006c1e:	bf04      	itt	eq
 8006c20:	6819      	ldreq	r1, [r3, #0]
 8006c22:	685b      	ldreq	r3, [r3, #4]
 8006c24:	6063      	str	r3, [r4, #4]
 8006c26:	bf04      	itt	eq
 8006c28:	1949      	addeq	r1, r1, r5
 8006c2a:	6021      	streq	r1, [r4, #0]
 8006c2c:	6054      	str	r4, [r2, #4]
 8006c2e:	e7ca      	b.n	8006bc6 <_free_r+0x26>
 8006c30:	b003      	add	sp, #12
 8006c32:	bd30      	pop	{r4, r5, pc}
 8006c34:	20004190 	.word	0x20004190

08006c38 <sbrk_aligned>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	4e0e      	ldr	r6, [pc, #56]	; (8006c74 <sbrk_aligned+0x3c>)
 8006c3c:	460c      	mov	r4, r1
 8006c3e:	6831      	ldr	r1, [r6, #0]
 8006c40:	4605      	mov	r5, r0
 8006c42:	b911      	cbnz	r1, 8006c4a <sbrk_aligned+0x12>
 8006c44:	f000 f8bc 	bl	8006dc0 <_sbrk_r>
 8006c48:	6030      	str	r0, [r6, #0]
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f000 f8b7 	bl	8006dc0 <_sbrk_r>
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	d00a      	beq.n	8006c6c <sbrk_aligned+0x34>
 8006c56:	1cc4      	adds	r4, r0, #3
 8006c58:	f024 0403 	bic.w	r4, r4, #3
 8006c5c:	42a0      	cmp	r0, r4
 8006c5e:	d007      	beq.n	8006c70 <sbrk_aligned+0x38>
 8006c60:	1a21      	subs	r1, r4, r0
 8006c62:	4628      	mov	r0, r5
 8006c64:	f000 f8ac 	bl	8006dc0 <_sbrk_r>
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d101      	bne.n	8006c70 <sbrk_aligned+0x38>
 8006c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8006c70:	4620      	mov	r0, r4
 8006c72:	bd70      	pop	{r4, r5, r6, pc}
 8006c74:	20004194 	.word	0x20004194

08006c78 <_malloc_r>:
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	1ccd      	adds	r5, r1, #3
 8006c7e:	f025 0503 	bic.w	r5, r5, #3
 8006c82:	3508      	adds	r5, #8
 8006c84:	2d0c      	cmp	r5, #12
 8006c86:	bf38      	it	cc
 8006c88:	250c      	movcc	r5, #12
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	db01      	blt.n	8006c94 <_malloc_r+0x1c>
 8006c90:	42a9      	cmp	r1, r5
 8006c92:	d905      	bls.n	8006ca0 <_malloc_r+0x28>
 8006c94:	230c      	movs	r3, #12
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	2600      	movs	r6, #0
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca0:	4e2e      	ldr	r6, [pc, #184]	; (8006d5c <_malloc_r+0xe4>)
 8006ca2:	f000 f89d 	bl	8006de0 <__malloc_lock>
 8006ca6:	6833      	ldr	r3, [r6, #0]
 8006ca8:	461c      	mov	r4, r3
 8006caa:	bb34      	cbnz	r4, 8006cfa <_malloc_r+0x82>
 8006cac:	4629      	mov	r1, r5
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f7ff ffc2 	bl	8006c38 <sbrk_aligned>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	d14d      	bne.n	8006d56 <_malloc_r+0xde>
 8006cba:	6834      	ldr	r4, [r6, #0]
 8006cbc:	4626      	mov	r6, r4
 8006cbe:	2e00      	cmp	r6, #0
 8006cc0:	d140      	bne.n	8006d44 <_malloc_r+0xcc>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	eb04 0803 	add.w	r8, r4, r3
 8006ccc:	f000 f878 	bl	8006dc0 <_sbrk_r>
 8006cd0:	4580      	cmp	r8, r0
 8006cd2:	d13a      	bne.n	8006d4a <_malloc_r+0xd2>
 8006cd4:	6821      	ldr	r1, [r4, #0]
 8006cd6:	3503      	adds	r5, #3
 8006cd8:	1a6d      	subs	r5, r5, r1
 8006cda:	f025 0503 	bic.w	r5, r5, #3
 8006cde:	3508      	adds	r5, #8
 8006ce0:	2d0c      	cmp	r5, #12
 8006ce2:	bf38      	it	cc
 8006ce4:	250c      	movcc	r5, #12
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	4638      	mov	r0, r7
 8006cea:	f7ff ffa5 	bl	8006c38 <sbrk_aligned>
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d02b      	beq.n	8006d4a <_malloc_r+0xd2>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	442b      	add	r3, r5
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	e00e      	b.n	8006d18 <_malloc_r+0xa0>
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	1b52      	subs	r2, r2, r5
 8006cfe:	d41e      	bmi.n	8006d3e <_malloc_r+0xc6>
 8006d00:	2a0b      	cmp	r2, #11
 8006d02:	d916      	bls.n	8006d32 <_malloc_r+0xba>
 8006d04:	1961      	adds	r1, r4, r5
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	6025      	str	r5, [r4, #0]
 8006d0a:	bf18      	it	ne
 8006d0c:	6059      	strne	r1, [r3, #4]
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	bf08      	it	eq
 8006d12:	6031      	streq	r1, [r6, #0]
 8006d14:	5162      	str	r2, [r4, r5]
 8006d16:	604b      	str	r3, [r1, #4]
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f104 060b 	add.w	r6, r4, #11
 8006d1e:	f000 f865 	bl	8006dec <__malloc_unlock>
 8006d22:	f026 0607 	bic.w	r6, r6, #7
 8006d26:	1d23      	adds	r3, r4, #4
 8006d28:	1af2      	subs	r2, r6, r3
 8006d2a:	d0b6      	beq.n	8006c9a <_malloc_r+0x22>
 8006d2c:	1b9b      	subs	r3, r3, r6
 8006d2e:	50a3      	str	r3, [r4, r2]
 8006d30:	e7b3      	b.n	8006c9a <_malloc_r+0x22>
 8006d32:	6862      	ldr	r2, [r4, #4]
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	bf0c      	ite	eq
 8006d38:	6032      	streq	r2, [r6, #0]
 8006d3a:	605a      	strne	r2, [r3, #4]
 8006d3c:	e7ec      	b.n	8006d18 <_malloc_r+0xa0>
 8006d3e:	4623      	mov	r3, r4
 8006d40:	6864      	ldr	r4, [r4, #4]
 8006d42:	e7b2      	b.n	8006caa <_malloc_r+0x32>
 8006d44:	4634      	mov	r4, r6
 8006d46:	6876      	ldr	r6, [r6, #4]
 8006d48:	e7b9      	b.n	8006cbe <_malloc_r+0x46>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	603b      	str	r3, [r7, #0]
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f000 f84c 	bl	8006dec <__malloc_unlock>
 8006d54:	e7a1      	b.n	8006c9a <_malloc_r+0x22>
 8006d56:	6025      	str	r5, [r4, #0]
 8006d58:	e7de      	b.n	8006d18 <_malloc_r+0xa0>
 8006d5a:	bf00      	nop
 8006d5c:	20004190 	.word	0x20004190

08006d60 <_realloc_r>:
 8006d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d64:	4680      	mov	r8, r0
 8006d66:	4614      	mov	r4, r2
 8006d68:	460e      	mov	r6, r1
 8006d6a:	b921      	cbnz	r1, 8006d76 <_realloc_r+0x16>
 8006d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d70:	4611      	mov	r1, r2
 8006d72:	f7ff bf81 	b.w	8006c78 <_malloc_r>
 8006d76:	b92a      	cbnz	r2, 8006d84 <_realloc_r+0x24>
 8006d78:	f7ff ff12 	bl	8006ba0 <_free_r>
 8006d7c:	4625      	mov	r5, r4
 8006d7e:	4628      	mov	r0, r5
 8006d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d84:	f000 f838 	bl	8006df8 <_malloc_usable_size_r>
 8006d88:	4284      	cmp	r4, r0
 8006d8a:	4607      	mov	r7, r0
 8006d8c:	d802      	bhi.n	8006d94 <_realloc_r+0x34>
 8006d8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d92:	d812      	bhi.n	8006dba <_realloc_r+0x5a>
 8006d94:	4621      	mov	r1, r4
 8006d96:	4640      	mov	r0, r8
 8006d98:	f7ff ff6e 	bl	8006c78 <_malloc_r>
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d0ed      	beq.n	8006d7e <_realloc_r+0x1e>
 8006da2:	42bc      	cmp	r4, r7
 8006da4:	4622      	mov	r2, r4
 8006da6:	4631      	mov	r1, r6
 8006da8:	bf28      	it	cs
 8006daa:	463a      	movcs	r2, r7
 8006dac:	f7ff fbb8 	bl	8006520 <memcpy>
 8006db0:	4631      	mov	r1, r6
 8006db2:	4640      	mov	r0, r8
 8006db4:	f7ff fef4 	bl	8006ba0 <_free_r>
 8006db8:	e7e1      	b.n	8006d7e <_realloc_r+0x1e>
 8006dba:	4635      	mov	r5, r6
 8006dbc:	e7df      	b.n	8006d7e <_realloc_r+0x1e>
	...

08006dc0 <_sbrk_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d06      	ldr	r5, [pc, #24]	; (8006ddc <_sbrk_r+0x1c>)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	4608      	mov	r0, r1
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	f7fa f9a6 	bl	800111c <_sbrk>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_sbrk_r+0x1a>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_sbrk_r+0x1a>
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	20004198 	.word	0x20004198

08006de0 <__malloc_lock>:
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <__malloc_lock+0x8>)
 8006de2:	f000 b811 	b.w	8006e08 <__retarget_lock_acquire_recursive>
 8006de6:	bf00      	nop
 8006de8:	2000419c 	.word	0x2000419c

08006dec <__malloc_unlock>:
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <__malloc_unlock+0x8>)
 8006dee:	f000 b80c 	b.w	8006e0a <__retarget_lock_release_recursive>
 8006df2:	bf00      	nop
 8006df4:	2000419c 	.word	0x2000419c

08006df8 <_malloc_usable_size_r>:
 8006df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dfc:	1f18      	subs	r0, r3, #4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bfbc      	itt	lt
 8006e02:	580b      	ldrlt	r3, [r1, r0]
 8006e04:	18c0      	addlt	r0, r0, r3
 8006e06:	4770      	bx	lr

08006e08 <__retarget_lock_acquire_recursive>:
 8006e08:	4770      	bx	lr

08006e0a <__retarget_lock_release_recursive>:
 8006e0a:	4770      	bx	lr

08006e0c <_init>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr

08006e18 <_fini>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	bf00      	nop
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr
